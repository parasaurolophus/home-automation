[
    {
        "id": "e1d7dd3bdd3cf24a",
        "type": "tab",
        "label": "Broker",
        "disabled": false,
        "info": "Broadcast messages received from any client to all clients. Note that\nall properties other than `msg._session` and `msg.retain` are\ntransmitted directly from the publisher to all subscribers.\n\n- Removes `msg._session` entirely, in the case of initially published\n  messages.\n\n- Handles `msg.topic` and `msg.retain` in a fashion inspired by MQTT.\n\nIf a client publishes a message with `msg.retain` set to `true`, the\n`retain` function node saves a clone of the message in flow context\nusing a file-system backed context store using `msg.topic` as the key.\nIt then sets `msg.retain` to `false` before broadcasting the message\nto subscribed clients.\n\nEach time a client connects, the `retained` function node sends that\nclient all currently stored messages with `msg.retain` set to `true`.\n\nRetained messages' contents can be updated by sending subsequent\nmessages with the same `msg.topic` and `msg.retain` set to `true`.\n\nRetained messages can be deleted by sending subsequent messages with\nthe same `msg.topic`, `msg.retain` set to `true` and `msg.payload`\nset to the empty string (`''`).",
        "env": []
    },
    {
        "id": "1f224d5f7092fb57",
        "type": "tab",
        "label": "Timer",
        "disabled": false,
        "info": "Publish event messages, with `msg.topic` and `msg.payload` as described\nbelow, each time the corresponding conditions occur.\n\nThese messages are sent each time flows start and then once per day\nwhile the flow is running:\n\n- `msg.topic` set to `daily/theme` with `msg.payload` set to one of\n  the _theme_ values described below\n\n- `msg.topic` set to `daily/sunrise` with `msg.payload` set to the\n  timestamp for the time at which the sun rises on the current day\n\n- `msg.topic` set to `daily/sunset` with `msg.payload` set to the\n  timestamp for the time at which the sun sets on the current day\n\nThis message is sent at the same time the preceding daily events\nand also each time a user changes the _bedtime_ setting:\n\n- `msg.topic` set to `daily/bedtime` with `msg.payload` set to a\n  randomly chosen timestamp as described below\n\nThis message is sent each time flows start and then up to five times\nper day while the flow is running:\n\n- `msg.topic` set to `timer/time` with `msg.payload` set to one of the\n_time_ values described below\n\n### Bedtime\n\nThe dashboard provides a means for a user to select a given hour\nfor \"bedtime.\" The actual value for `daily/bedtime` event payloads\nvaries each day by adding a ranomly chosen offset of up to 30 minutes\nbefore or after the hour selected by a user.\n\n### Themes\n\nThe `msg.payload` for `daily/theme` is set to one of the following\nstrings based on the current date:\n\n- `tribal` - July 1 - 4 (US Independence Day)\n- `spooky` - any day in October\n- `jolly` - any day in December\n- `standard` - any other day\n\n### Times\n\nAn event message with `msg.topic` set to `timer/time` is published\neach time flows start and then at the start of each time range\ncorresponding to the following values for `msg.payload`. Note\nthat the rules are based on the sun's position each minute of each\nday:\n\n- `morning` - published when the sun's azimuth is from the east and\n  its altitude is below the threshold for `midday` described below\n\n- `midday` - published when the sun first reaches a particular altitude\n  each day; note that `midday` events do not occur on certain days\n  at certain latitudes\n\n- `afternoon` - published when the sun's azimuth is from the west\n  and its altitude is above the horizon but below the threshold for\n  `midday`\n\n- `evening` - published when the sun's altitude is below the horizon\n  and the current time is earlier than the randomly chosen _bedtime_\n\n- `night` - published when the sun's altitude is below the horizon\n  and the current time is later than the randomly chosen _bedtime_\n",
        "env": []
    },
    {
        "id": "bfdb5183ea783e85",
        "type": "tab",
        "label": "Automation",
        "disabled": false,
        "info": "Subscribe to timer and settings events which trigger automation.\n\nNote that this is the one flow with hard-coded references to particular\ndevice groups and scenes.",
        "env": []
    },
    {
        "id": "40413194443e96c6",
        "type": "tab",
        "label": "PowerView",
        "disabled": false,
        "info": "Interoperate with the PowerView hub whose IP address is specified by the\n`${POWERVIEW_ADDRESS}` environment variable.\n\nThis flow obtains the current configuration data from the hub and\npublishes an event message whose `msg.topic` is `powerview/model`\nand whose `msg.payload` contains a JSON object with the structure\nexpected by the front-end code for the dashboard. It also subscribes\nto `put/powerview/scene` messages and activates the PowerView scenes\nindicated by their payloads.",
        "env": []
    },
    {
        "id": "d3b34304591c64d7",
        "type": "tab",
        "label": "Hue",
        "disabled": false,
        "info": "Interoperate with Philips Hue Bridges.\n\nThis flow:\n\n- Uses mDNS to discover Hue bridges on the LAN and publishes\n  corresponding `hue/bridges` event messages for use by the dashboard's\n  front-end logic\n\n- Contains two instances of the _Hue API V2_ subflow, one each for\n  the Hue bridges specified by the `${GROUND_FLOOR_HUE_ADDRESS}` and\n  `${BASEMENT_HUE_ADDRESS}` environment variables",
        "env": []
    },
    {
        "id": "85ed27d795e6e866",
        "type": "subflow",
        "name": "Hue API V2",
        "info": "Encapsulate the flows that interoperate with a given Philips Hue Bridge",
        "category": "hue",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "KEY",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TITLE",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-api-v2",
            "type": "hue-api-v2",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Encapsulate logic to interoperate with a Philips Hue Bridge",
            "keywords": "node-red,philips-hue,hue,hue-api,hue-api-v2",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-lightbulb-o",
        "status": {
            "x": 1020,
            "y": 700,
            "wires": [
                {
                    "id": "ce519b683b6e6767",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "699fdca4e881f8ec",
        "type": "subflow",
        "name": "Get PowerView Metadata",
        "info": "Retrieve and parse metadata for a specified type of resource from a given PowerView hub",
        "category": "powerview",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "8f3bd16c7f353be0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 100,
                "wires": [
                    {
                        "id": "ca455aa5752d94d8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "URI",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TARGET",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "DATA",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-get-powerview-metadata",
            "type": "get-powerview-metadata",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Retrieve and parse metadata for a specified type of resource from a given PowerView hub",
            "keywords": "node-red,hunter-douglas,powerview",
            "license": "MIT"
        },
        "color": "#C7E9C0",
        "outputLabels": [
            "metadata"
        ],
        "icon": "font-awesome/fa-align-justify"
    },
    {
        "id": "450f4de3c4f73b40",
        "type": "subflow",
        "name": "Hue Automation",
        "info": "Send a series of commands to the\n[Hue Bridge API V2](https://developers.meethue.com/develop/hue-api-v2/).\nThe commands are created from the value of the `${COMMANDS}` subflow\nconfiguration variable.\n\nIn particular, each element of `${COMMANDS}` must contain `topic`,\n`payload`, `method` and `target` members. For example, if an instance\nof this subflow is configured with `${COMMANDS}` set to:\n\n```\n[\n    {\n        \"topic\": \"resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971\",\n        \"payload\": {\n            \"on\": {\n                \"on\": false\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    },\n    {\n        \"topic\": \"resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    },\n    {\n        \"topic\": \"resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    }\n]\n```\n\nthat instance will send messages to turn off the Hue `grouped_light`\nresource whose id is `bad8480b-b404-42d1-a9e7-a4a69f400971` and\nactivate the scenes whose id's are `5d507fb6-89f6-459a-b327-0fffd0c6dc48`\nand `48c39b9f-1599-4a5c-b7f6-bad6cad4029a`. It does so by invoking a\n`link call` node with `msg.target` set to `\"send to ground floor hue\"`.\n\n**Note:** This subflow is theoretically unnecessary since one could,\nin principle, define any desired lighting state as an individual scene\nbelonging to a particular room or zone using the Hue mobile app. In that\ncase, each instance of this subflow would correspond to a single command\nto activate a particular such scene. This subflow exists, in part, as a\nwork-around for well-known limitations in the Hue bridge in regards to\nthe number of devices per room or zone. In addition, this subflow\nallows for setting the state of combinations of lighting devices without\ncluttering up the view presented to users of the Hue app with lots of\nzones and scenes which would exist solely for the purposes of these\nNode-RED flows but which would rarely, if ever, make sense to activate\nmanually. Finally, it also provides a bit of future-proofing for\nchanges in the Hue API since Philips sometimes exposes new features in\nthe bridge API before they can be accessed directly in the mobile app.",
        "category": "hue",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "3aead3d3f53c86d6"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "COMMANDS",
                "type": "json",
                "value": "[]",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-lighting",
            "type": "hue-lighting",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Send messages controlling a particular combination of Hue lighting groups and scenes",
            "keywords": "node-red,philips-hue,hue,hue-api,hue-api-v2",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-cogs",
        "status": {
            "x": 280,
            "y": 140,
            "wires": [
                {
                    "id": "2ba586de1fbf441d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5be845dd7de1f9ed",
        "type": "group",
        "z": "e1d7dd3bdd3cf24a",
        "name": "websocket based publish / subscribe message broker with semantics inspired by mqtt",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "label": true,
            "color": "#ffffff",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "b48f13f63fadba17",
            "e1c10e3b6608de71",
            "e69d5ec739695570",
            "5f09f67803464fe9",
            "1b10e2f1524c44ef",
            "e450663aac44ed28",
            "9cb4a587d2d04193"
        ],
        "x": 14,
        "y": 19,
        "w": 732,
        "h": 202
    },
    {
        "id": "0fd970345919b420",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": "discover hue bridges",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "9cf28d89e0f81966",
            "14b78c9b72d385fd",
            "854fc957cc0aa798",
            "57e2d4b892263fc3",
            "05224ffb74b3f646",
            "a8cede2bfeed191c",
            "c16229f8f80c5a43",
            "8a2991eb5255cb54",
            "90c4d02d576477e1",
            "e923bea48eeed441",
            "7756c6eb9522da59"
        ],
        "x": 14,
        "y": 19,
        "w": 1232,
        "h": 202
    },
    {
        "id": "23bf1f9635c44cc8",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": " initiate the client application key creation process on the hue bridge specified by msg.payload",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "0ed14c935a7933e8",
            "f74128d99635d540",
            "3dbe561bfaf5bbf1",
            "226b30949f9a903b",
            "35758e623450f0b1",
            "2159eac5031ae752",
            "2626ba9e8d396f71"
        ],
        "x": 14,
        "y": 239,
        "w": 952,
        "h": 122
    },
    {
        "id": "0fb8e43c903b3506",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "send messages at a rate of no more than 1 per second to the Hue Bridge at ${ADDRESS} using ${KEY} as the client application key",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "07d61ea24d59a251",
            "ccb8f8c4fd3333af",
            "a1a4ef6fbcea1cd4",
            "2dd6e02f993c8f04",
            "3635f7d1709b0fa7",
            "7a4ba2d58e8e1f70",
            "7bf3a0d5f7ee216b",
            "7189e8414abb8abf",
            "93a323937c189b13"
        ],
        "x": 14,
        "y": 119,
        "w": 1052,
        "h": 162
    },
    {
        "id": "96971e50c13ead01",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "subscribe to server-sent events from the Hue Bridge at ${ADDRESS} using ${KEY} as the client application key",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "label": true,
            "color": "#ffffff",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "5a1b87c5d08fa5d4",
            "12f058cdadbb39ce",
            "80bbf467c351320f",
            "d3e5044fe363855b",
            "5e338d73bb5c33fb",
            "153449edfaf38a67",
            "964ed66cfe05da8b",
            "4ab229c77e4ce0fe",
            "5e36497f30cb3265",
            "6ce6327771b66664",
            "f564e0e7691828da",
            "3c4dc36276340285",
            "2387a62701229e79",
            "f7841898977deb1b",
            "c3f7e150dea7e636",
            "cded354eec0287f2",
            "7e1652c67f07cb3c",
            "4f5d5c8a6961a27c",
            "9055d5f42e64e6d0",
            "531fbb9eb4631e85"
        ],
        "x": 14,
        "y": 299,
        "w": 1252,
        "h": 302
    },
    {
        "id": "f1e1b4bb5ddac24f",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": "ground floor hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "d3686879543e1951",
            "d046e6267c76dfe1"
        ],
        "x": 14,
        "y": 379,
        "w": 952,
        "h": 82
    },
    {
        "id": "9cf0457b813ca743",
        "type": "group",
        "z": "40413194443e96c6",
        "name": "activate the powerview scene whose id is specified by msg.payload",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "2bf099ec37e84bbc",
            "0710d650a741b921",
            "5080b46132584bf3",
            "54a31fbc4733c574",
            "8d706565bc654112"
        ],
        "x": 14,
        "y": 219,
        "w": 1272,
        "h": 82,
        "info": "Dynamically create dashboard buttons corresponding to each scene\ndiscovered by querying a _PowerView_ hub."
    },
    {
        "id": "cb106476337f4d38",
        "type": "group",
        "z": "40413194443e96c6",
        "name": "send commands to the powerview hub at a rate of no more than 1 per second",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "a250d71416af8250",
            "70e42b6637f4c865",
            "413305fe8cf8bc16",
            "3b9aea255e25c86d",
            "450c11f088a3f9ee",
            "9154f7fa8b08933f"
        ],
        "x": 14,
        "y": 79,
        "w": 832,
        "h": 122
    },
    {
        "id": "9823c620ddf3d6e0",
        "type": "group",
        "z": "40413194443e96c6",
        "name": "poweview hub",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "7fb1bd1acb1ca5f7",
            "eb7123132bce19c7",
            "02eec7feccc1567d",
            "07a492e2d29b5dd3",
            "99ab390e30a9d634",
            "2357258b01c15112",
            "62d44392a9aac7fc",
            "4e40e2700edff9ec"
        ],
        "x": 14,
        "y": 319,
        "w": 1272,
        "h": 122
    },
    {
        "id": "a21835234a7481fe",
        "type": "group",
        "z": "1f224d5f7092fb57",
        "name": "send daily events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "fd931d60371497cc",
            "2172861d6eca2d1c",
            "ec4c72ab0b8b53ad",
            "b42f1fba69cb70e0",
            "46ac71815281ccea",
            "1182570b961cb1b0",
            "4b3a06bb3281f1c5",
            "0fa595499d40a3fd",
            "a4e1a5b908d33066",
            "cbcdf85a73052db5"
        ],
        "x": 14,
        "y": 19,
        "w": 1252,
        "h": 202
    },
    {
        "id": "0b0da0b6b3a2a19d",
        "type": "group",
        "z": "1f224d5f7092fb57",
        "name": "send timer events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "67396769faf05d99",
            "d9f51cf712535848",
            "76bbc731fb4262bd",
            "9a9fbaf721bdfb20",
            "de9d9eb71b136375",
            "48582d354b6b0fda",
            "903dfd8686a14a20",
            "386e624f284112c8",
            "46c44e33f918af63",
            "154766c193057414"
        ],
        "x": 14,
        "y": 239,
        "w": 1252,
        "h": 162
    },
    {
        "id": "c2e3e9d2c97df2d0",
        "type": "group",
        "z": "bfdb5183ea783e85",
        "name": "lighting automation",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "870608ff910feb60",
            "0e592700939a92aa",
            "353cfc8157d414e1",
            "1cb0a0826e19ac25",
            "8b2870e325e61ea1",
            "541a0eff9f0235b7",
            "4c3ffaa9eed2fd35",
            "5e838b011b496bb4",
            "244e029d9a276e82"
        ],
        "x": 14,
        "y": 439,
        "w": 832,
        "h": 322
    },
    {
        "id": "8326ae1a15518f8f",
        "type": "group",
        "z": "bfdb5183ea783e85",
        "name": "window shade automation",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "color": "#ffffff"
        },
        "nodes": [
            "6a9ac472018c38ea",
            "c8c9c1f0d8b62902",
            "9e961b1409432775",
            "db4f7c2c93cd8f30",
            "7adca925e9011e2f",
            "679d6a0d2002bcb7",
            "c8fb3c01f10259ca",
            "839872dec0a80cfa"
        ],
        "x": 14,
        "y": 219,
        "w": 1012,
        "h": 202
    },
    {
        "id": "9f074aa55117ee9d",
        "type": "group",
        "z": "bfdb5183ea783e85",
        "name": "subscribe to automation trigger events",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "a19b812821bec622",
            "477b281b3f87fc89",
            "aa9143d910c74bec",
            "2d18a9e3a7fd198a",
            "90ecd878733cb225",
            "636d33f7c05cc8df",
            "d4cab7825ba8bf11",
            "85d575b4c5bfe117"
        ],
        "x": 14,
        "y": 119,
        "w": 1252,
        "h": 82
    },
    {
        "id": "4893dd6a2321040d",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "status",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "02be9eee8ee84874",
            "fdc1f995f016ddba",
            "83f1cdfad9fc4846",
            "a45d7fdb0d022401",
            "4b9c1c4c1a78af55",
            "0b223f6872d96c8f"
        ],
        "x": 14,
        "y": 619,
        "w": 852,
        "h": 122
    },
    {
        "id": "3a0077281d6eefee",
        "type": "group",
        "z": "bfdb5183ea783e85",
        "name": "refresh controls when flows start",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "499f234a478a41e7",
            "c3cac0049cccb7e7",
            "c79b769649c2b419",
            "189c38230a6eb7a0"
        ],
        "x": 14,
        "y": 19,
        "w": 712,
        "h": 82
    },
    {
        "id": "d64d4d2689200662",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "send client application key when flow starts",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "c028b2fa6fa17888",
            "edeeaf776290c2ca",
            "6a043b7f70247cf8",
            "6006768d0e45ea91"
        ],
        "x": 14,
        "y": 19,
        "w": 672,
        "h": 82
    },
    {
        "id": "b3c2354a4072ebba",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": "basement hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#ffffff",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "0f699ed605fadf59",
            "048ec8eb41be82ae"
        ],
        "x": 14,
        "y": 479,
        "w": 952,
        "h": 82
    },
    {
        "id": "431414ce08ebb3c0",
        "type": "websocket-listener",
        "z": "e1d7dd3bdd3cf24a",
        "path": "/broker",
        "wholemsg": "true"
    },
    {
        "id": "06c952f588cb12f4",
        "type": "tls-config",
        "z": "d3b34304591c64d7",
        "name": "Ignore Server Certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "723506cc20638a3c",
        "type": "tls-config",
        "z": "85ed27d795e6e866",
        "name": "Ignore Server Certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "b46802b9cb5603b3",
        "type": "websocket-client",
        "path": "${BROKER_URL}",
        "tls": "",
        "wholemsg": "true",
        "hb": "5",
        "subprotocol": ""
    },
    {
        "id": "07d61ea24d59a251",
        "type": "delay",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "93a323937c189b13"
            ]
        ]
    },
    {
        "id": "ccb8f8c4fd3333af",
        "type": "http request",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "723506cc20638a3c",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "a1a4ef6fbcea1cd4",
                "2dd6e02f993c8f04"
            ]
        ]
    },
    {
        "id": "a1a4ef6fbcea1cd4",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "validate",
        "func": "const message = {\n    payload: RED.util.cloneMessage(msg),\n    topic: 'hue/' + env.get('ADDRESS') + '/error'\n}\n\nif (!Number.isInteger(msg.statusCode)) {\n\n    return message\n\n}\n\n// ignore 207 due to frequent, spurious use by the Philips developers\nif ((msg.statusCode != 200) && (msg.statusCode != 207)) {\n\n    return message\n\n}\n\nif (!Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\n\n    return message\n\n}\n\nif (!Object.prototype.hasOwnProperty.call(msg.payload, 'errors')) {\n\n    return message\n\n}\n\nif ((msg.statusCode != 207) && (msg.payload.errors.length > 0)) {\n\n    return message\n\n}\n\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 240,
        "wires": [
            [
                "7bf3a0d5f7ee216b"
            ]
        ]
    },
    {
        "id": "2dd6e02f993c8f04",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 160,
        "wires": [
            [
                "7189e8414abb8abf"
            ]
        ]
    },
    {
        "id": "5a1b87c5d08fa5d4",
        "type": "delay",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 380,
        "wires": [
            [
                "12f058cdadbb39ce"
            ]
        ]
    },
    {
        "id": "12f058cdadbb39ce",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "request",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 380,
        "wires": [
            [
                "80bbf467c351320f"
            ]
        ]
    },
    {
        "id": "80bbf467c351320f",
        "type": "link call",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "links": [
            "7a4ba2d58e8e1f70"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 380,
        "wires": [
            [
                "d3e5044fe363855b"
            ]
        ]
    },
    {
        "id": "d3e5044fe363855b",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "format event",
        "func": "// clear out cached resources\nflow.set('resources', {})\n\nconst updates = [{ type: 'update', data: msg.payload }]\nconst event = { type: 'message', data: JSON.stringify(updates) }\n\nreturn {\n    payload: event,\n    topic: 'message'\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ]
        ],
        "outputLabels": [
            "ready"
        ]
    },
    {
        "id": "5e338d73bb5c33fb",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "persist data",
        "func": "const TOPIC = 'hue/' + env.get('ADDRESS')\nconst resources = {}\nconst data = JSON.parse(msg.payload.data)\nconst messages = []\n\nresources.payload = flow.get('resources')\n\nfor (let datum of data) {\n\n    for (let value of datum.data) {\n\n        const message = {\n            topic: TOPIC + '/resource/' + value.type + '/' + value.id,\n            retain: false\n        }\n\n        const category = resources.payload[value.type] || {}\n        let resource = category[value.id] || {}\n\n        switch (datum.type) {\n\n            case 'add':\n            case 'update':\n\n                for (let property in value) {\n\n                    resource[property] = value[property]\n                }\n\n                category[value.id] = message.payload = resource\n                break\n\n            case 'delete':\n\n                delete category[value.id]\n                message.payload = ''\n                break\n\n            default:\n\n                node.warn(JSON.stringify(datum, undefined, 1))\n                break\n\n        }\n\n        resources.payload[value.type] = category\n        messages.push(message)\n\n    }\n}\n\nflow.set('resources', resources.payload)\nreturn [resources, messages]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            [
                "f7841898977deb1b"
            ],
            [
                "964ed66cfe05da8b"
            ]
        ],
        "outputLabels": [
            "resources",
            ""
        ]
    },
    {
        "id": "153449edfaf38a67",
        "type": "EventSource",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "x": 690,
        "y": 480,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ],
            [
                "4ab229c77e4ce0fe"
            ],
            [
                "5e36497f30cb3265"
            ]
        ]
    },
    {
        "id": "964ed66cfe05da8b",
        "type": "rbe",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "4f5d5c8a6961a27c"
            ]
        ]
    },
    {
        "id": "4ab229c77e4ce0fe",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "hue/${ADDRESS}/onopen",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "5e36497f30cb3265",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "hue/${ADDRESS}/onerror",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 540,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "6ce6327771b66664",
        "type": "complete",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "format event",
        "scope": [
            "d3e5044fe363855b"
        ],
        "uncaught": false,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "9055d5f42e64e6d0"
            ]
        ]
    },
    {
        "id": "f564e0e7691828da",
        "type": "complete",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "close",
        "scope": [
            "531fbb9eb4631e85"
        ],
        "uncaught": false,
        "x": 90,
        "y": 380,
        "wires": [
            [
                "5a1b87c5d08fa5d4"
            ]
        ]
    },
    {
        "id": "f7841898977deb1b",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "model",
        "func": "const ADDRESS = env.get('ADDRESS')\nconst TOPIC = 'hue/' + ADDRESS\nconst MODEL = TOPIC + '/model'\nconst PUT = 'put/' + TOPIC + '/resource'\n\nconst message = {\n    payload: { groups: [], title: env.get('TITLE') },\n    topic: MODEL,\n    retain: true\n}\n\nfunction findOwner(grouped_light) {\n\n    const groups = msg.payload[grouped_light.owner.rtype]\n\n    if (Object.prototype.hasOwnProperty.call(groups, grouped_light.owner.rid)) {\n\n        return groups[grouped_light.owner.rid]\n\n    }\n\n    throw 'no container found for grouped_light ' + grouped_light.id\n\n}\n\nfunction findScenes(owner) {\n\n    const scenes = []\n\n    for (let sceneId in msg.payload.scene) {\n\n        const scene = msg.payload.scene[sceneId]\n\n        if (scene.group.rid == owner.id) {\n\n            scene.value = PUT + '/scene/' + scene.id\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n\n        return a.metadata.name.localeCompare(b.metadata.name)\n\n    })\n\n}\n\nfor (let grouped_light_id in msg.payload.grouped_light) {\n\n    const grouped_light = msg.payload.grouped_light[grouped_light_id]\n    const owner = findOwner(grouped_light)\n    const scenes = findScenes(owner)\n\n    message.payload.groups.push({\n        grouped_light: grouped_light,\n        owner: owner,\n        scenes: scenes,\n        name: (owner.metadata ? owner.metadata.name : 'All Lights'),\n        value: PUT + '/grouped_light/' + grouped_light.id\n    })\n\n}\n\nmessage.payload.groups = message.payload.groups.sort((a, b) => {\n\n    return a.name.localeCompare(b.name)\n\n})\n\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "7e1652c67f07cb3c"
            ]
        ]
    },
    {
        "id": "3c4dc36276340285",
        "type": "comment",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "https://www.npmjs.com/package/@parasaurolophus/node-red-eventsource",
        "info": "",
        "x": 300,
        "y": 340,
        "wires": []
    },
    {
        "id": "3635f7d1709b0fa7",
        "type": "comment",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 160,
        "wires": []
    },
    {
        "id": "2387a62701229e79",
        "type": "link call",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "links": [
            "7a4ba2d58e8e1f70"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "c3f7e150dea7e636",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "dispatch",
        "func": "if (msg.topic == 'controls/refresh') {\n\n    return [\n        { payload: msg.payload },\n        null\n    ]\n\n}\n\nconst re = new RegExp('^put/hue/' + env.get('ADDRESS') + '/(resource/.+)$')\nconst matches = re.exec(msg.topic)\n\nif (Array.isArray(matches) && (matches.length == 2)) {\n\n    return [\n        null,\n        {\n            payload: msg.payload,\n            topic: matches[1],\n            method: msg.method\n        }\n    ]\n\n}\n\nreturn null",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "531fbb9eb4631e85"
            ],
            [
                "2387a62701229e79"
            ]
        ],
        "outputLabels": [
            "refresh",
            "put"
        ]
    },
    {
        "id": "fdc1f995f016ddba",
        "type": "link out",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "status",
        "mode": "link",
        "links": [
            "ce519b683b6e6767"
        ],
        "x": 290,
        "y": 700,
        "wires": [],
        "l": true
    },
    {
        "id": "ce519b683b6e6767",
        "type": "link in",
        "z": "85ed27d795e6e866",
        "name": "status",
        "links": [
            "fdc1f995f016ddba"
        ],
        "x": 930,
        "y": 700,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "02be9eee8ee84874",
        "type": "status",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "status: eventsource",
        "scope": [
            "153449edfaf38a67"
        ],
        "x": 130,
        "y": 680,
        "wires": [
            [
                "fdc1f995f016ddba",
                "4b9c1c4c1a78af55"
            ]
        ]
    },
    {
        "id": "83f1cdfad9fc4846",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "hue/${ADDRESS}/status",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 660,
        "wires": [
            [
                "a45d7fdb0d022401"
            ]
        ]
    },
    {
        "id": "c028b2fa6fa17888",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "d64d4d2689200662",
        "name": "send key",
        "func": "const KEY = env.get('KEY')\nconst ADDRESS = env.get('ADDRESS')\n\nreturn {\n    payload: KEY,\n    topic: 'hue/' + ADDRESS + '/key',\n    retain: true,\n    bridgeAddress: ADDRESS\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 60,
        "wires": [
            [
                "edeeaf776290c2ca"
            ]
        ]
    },
    {
        "id": "cded354eec0287f2",
        "type": "websocket in",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 260,
        "y": 540,
        "wires": [
            [
                "c3f7e150dea7e636"
            ]
        ]
    },
    {
        "id": "edeeaf776290c2ca",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "d64d4d2689200662",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 600,
        "y": 60,
        "wires": []
    },
    {
        "id": "6a043b7f70247cf8",
        "type": "status",
        "z": "85ed27d795e6e866",
        "g": "d64d4d2689200662",
        "name": "status: websocket out",
        "scope": [
            "edeeaf776290c2ca"
        ],
        "x": 140,
        "y": 60,
        "wires": [
            [
                "6006768d0e45ea91"
            ]
        ]
    },
    {
        "id": "6006768d0e45ea91",
        "type": "switch",
        "z": "85ed27d795e6e866",
        "g": "d64d4d2689200662",
        "name": "connect",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 60,
        "wires": [
            [
                "c028b2fa6fa17888"
            ]
        ]
    },
    {
        "id": "7a4ba2d58e8e1f70",
        "type": "link in",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "send to bridge",
        "links": [],
        "x": 110,
        "y": 200,
        "wires": [
            [
                "07d61ea24d59a251"
            ]
        ],
        "l": true
    },
    {
        "id": "7bf3a0d5f7ee216b",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "7e1652c67f07cb3c",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1180,
        "y": 360,
        "wires": []
    },
    {
        "id": "4f5d5c8a6961a27c",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1180,
        "y": 480,
        "wires": []
    },
    {
        "id": "a45d7fdb0d022401",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 780,
        "y": 660,
        "wires": []
    },
    {
        "id": "7189e8414abb8abf",
        "type": "link out",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "response",
        "mode": "return",
        "links": [],
        "x": 980,
        "y": 160,
        "wires": [],
        "l": true
    },
    {
        "id": "4b9c1c4c1a78af55",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(status.text)",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "status",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 660,
        "wires": [
            [
                "0b223f6872d96c8f"
            ]
        ]
    },
    {
        "id": "0b223f6872d96c8f",
        "type": "rbe",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 470,
        "y": 660,
        "wires": [
            [
                "83f1cdfad9fc4846"
            ]
        ]
    },
    {
        "id": "9055d5f42e64e6d0",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "open",
        "func": "return {\n    payload: {\n        url: 'https://' + env.get('ADDRESS') + '/eventstream/clip/v2',\n        initDict: {\n            withCredentials: false,\n            https: {\n                rejectUnauthorized: false\n            },\n            headers: {\n                'hue-application-key': env.get('KEY')\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "93a323937c189b13",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "request",
        "func": "const message = RED.util.cloneMessage(msg)\n\nmessage.url ='https://' + env.get('ADDRESS') + '/clip/v2/' + msg.topic\nmessage.headers = { \"hue-application-key\": env.get('KEY') }\n\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "ccb8f8c4fd3333af"
            ]
        ]
    },
    {
        "id": "531fbb9eb4631e85",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "close",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 520,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "02eb116aa3a7efad",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('ADDRESS') & $env('URI')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "a2ce2f10f0cbc3b4"
            ]
        ],
        "info": "Set `msg.url` to request the list of scenes from the PowerView hub."
    },
    {
        "id": "a2ce2f10f0cbc3b4",
        "type": "link call",
        "z": "699fdca4e881f8ec",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 440,
        "y": 100,
        "wires": [
            [
                "4597056c8e33d1d2"
            ]
        ]
    },
    {
        "id": "4597056c8e33d1d2",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$lookup(payload, $env('DATA'))",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "a4b2cb7314b93cec"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.sceneData`."
    },
    {
        "id": "a4b2cb7314b93cec",
        "type": "split",
        "z": "699fdca4e881f8ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 100,
        "wires": [
            [
                "e89d138990a2c571"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "e89d138990a2c571",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "decode name",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"name\":$base64decode(payload.name),\"id\":payload.id,\"roomId\":payload.roomId}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 100,
        "wires": [
            [
                "09ed6328f31946db"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "09ed6328f31946db",
        "type": "join",
        "z": "699fdca4e881f8ec",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 990,
        "y": 100,
        "wires": [
            [
                "ca455aa5752d94d8"
            ]
        ],
        "info": "Join previously split messages back into an array."
    },
    {
        "id": "ca455aa5752d94d8",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "DATA",
                "tot": "env",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 100,
        "wires": [
            []
        ],
        "info": "Set `msg.topic` to `scenes`."
    },
    {
        "id": "6363f7176ee29fbb",
        "type": "comment",
        "z": "699fdca4e881f8ec",
        "name": "retrieve and parse metadata for a specified type of resource from a given PowerView hub",
        "info": "",
        "x": 330,
        "y": 40,
        "wires": []
    },
    {
        "id": "8f3bd16c7f353be0",
        "type": "function",
        "z": "699fdca4e881f8ec",
        "name": "clone",
        "func": "return RED.util.cloneMessage(msg)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 100,
        "wires": [
            [
                "02eb116aa3a7efad"
            ]
        ]
    },
    {
        "id": "3aead3d3f53c86d6",
        "type": "function",
        "z": "450f4de3c4f73b40",
        "name": "commands",
        "func": "const messages = []\n\nfor (let command of env.get('COMMANDS')) {\n\n    const message = RED.util.cloneMessage(msg)\n\n    message.payload = command.payload\n    message.topic = command.topic\n    message.method = command.method\n    messages.push(message)\n\n}\n\nnode.status({\n    text: messages.length,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            [
                "cae7ad773f3664cb"
            ]
        ]
    },
    {
        "id": "2ba586de1fbf441d",
        "type": "status",
        "z": "450f4de3c4f73b40",
        "name": "status: commands",
        "scope": [
            "3aead3d3f53c86d6"
        ],
        "x": 150,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cae7ad773f3664cb",
        "type": "websocket out",
        "z": "450f4de3c4f73b40",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "b48f13f63fadba17",
        "type": "websocket in",
        "z": "e1d7dd3bdd3cf24a",
        "g": "5be845dd7de1f9ed",
        "name": "",
        "server": "431414ce08ebb3c0",
        "client": "",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "e450663aac44ed28"
            ]
        ]
    },
    {
        "id": "e1c10e3b6608de71",
        "type": "websocket out",
        "z": "e1d7dd3bdd3cf24a",
        "g": "5be845dd7de1f9ed",
        "name": "",
        "server": "431414ce08ebb3c0",
        "client": "",
        "x": 650,
        "y": 120,
        "wires": []
    },
    {
        "id": "e69d5ec739695570",
        "type": "status",
        "z": "e1d7dd3bdd3cf24a",
        "g": "5be845dd7de1f9ed",
        "name": "status: websocket out",
        "scope": [
            "e1c10e3b6608de71"
        ],
        "x": 140,
        "y": 180,
        "wires": [
            [
                "5f09f67803464fe9"
            ]
        ]
    },
    {
        "id": "5f09f67803464fe9",
        "type": "switch",
        "z": "e1d7dd3bdd3cf24a",
        "g": "5be845dd7de1f9ed",
        "name": "connect",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "1b10e2f1524c44ef"
            ]
        ]
    },
    {
        "id": "1b10e2f1524c44ef",
        "type": "function",
        "z": "e1d7dd3bdd3cf24a",
        "g": "5be845dd7de1f9ed",
        "name": "retained",
        "func": "const retained = flow.get('retained', 'file') || {}\nconst messages = []\n\nnode.status({\n    text: Object.keys(retained).length,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nfor (let topic in retained) {\n\n    const message = RED.util.cloneMessage(retained[topic])\n\n    message._session = msg.status._session\n    message.retain = true\n    messages.push(message)\n\n}\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "const retained = flow.get('retained', 'file') || {}\n\nnode.status({\n    text: Object.keys(retained).length,\n    shape: 'ring',\n    fill: 'blue'\n})",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "e1c10e3b6608de71"
            ]
        ]
    },
    {
        "id": "e450663aac44ed28",
        "type": "function",
        "z": "e1d7dd3bdd3cf24a",
        "g": "5be845dd7de1f9ed",
        "name": "retain",
        "func": "if (msg.retain) {\n\n    const retained = flow.get('retained', 'file') || {}\n\n    if (msg.payload === undefined || msg.payload === '') {\n\n        delete retained[msg.topic]\n\n    } else {\n\n        retained[msg.topic] = msg\n\n    }\n\n    flow.set('retained', retained, 'file')\n\n    node.status({\n        text: Object.keys(retained).length,\n        shape: 'dot',\n        fill: 'blue'\n    })\n}\n\nconst message = RED.util.cloneMessage(msg)\n\ndelete message._session\nmessage.retain = false\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "const retained = flow.get('retained', 'file') || {}\n\nnode.status({\n    text: Object.keys(retained).length,\n    shape: 'ring',\n    fill: 'blue'\n})",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "e1c10e3b6608de71"
            ]
        ]
    },
    {
        "id": "9cb4a587d2d04193",
        "type": "comment",
        "z": "e1d7dd3bdd3cf24a",
        "g": "5be845dd7de1f9ed",
        "name": "assumes a file-system backed context store named \"file\"",
        "info": "",
        "x": 320,
        "y": 120,
        "wires": []
    },
    {
        "id": "fd931d60371497cc",
        "type": "inject",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": true,
        "onceDelay": "1",
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 80,
        "wires": [
            [
                "2172861d6eca2d1c"
            ]
        ]
    },
    {
        "id": "67396769faf05d99",
        "type": "inject",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "de9d9eb71b136375"
            ]
        ]
    },
    {
        "id": "2172861d6eca2d1c",
        "type": "join",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "ec4c72ab0b8b53ad",
                "b42f1fba69cb70e0",
                "cbcdf85a73052db5"
            ]
        ],
        "info": "Synchronize receipt of `daily/timestamp` and `settings/bedtime`\nmessages."
    },
    {
        "id": "ec4c72ab0b8b53ad",
        "type": "function",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "theme",
        "func": "const date = new Date(msg.payload.daily)\nconst month = date.getMonth() + 1\nconst day = date.getDate()\nconst message = {}\n\nif ((month == 7) && (day <= 4)) {\n\n    message.payload = 'tribal'\n\n} else if (month == 10) {\n\n    message.payload = 'spooky'\n\n} else if (month == 12) {\n\n    message.payload = 'jolly'\n\n} else {\n\n    message.payload = 'standard'\n\n}\n\nnode.status({\n    text: message.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmessage.topic = 'daily/theme'\nmessage.retain = true\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 60,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "theme"
        ],
        "info": "Set `msg.payload` to one of the _theme_ values, described below, and\n`msg.topic` to `daily/theme`.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/theme`\n- `msg.payload` set to one of the following strings, based on the\n  the timestamp from the input:\n\n| `msg.payload` | Description         |\n|---------------|---------------------|\n| `tribal`      | July 1 - 4          |\n| `spooky`      | Any day in October  |\n| `jolly`       | Any day in December |\n| `standard`    | Any other day       |"
    },
    {
        "id": "b42f1fba69cb70e0",
        "type": "function",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "bedtime",
        "func": "const MILLIS_PER_SECOND = 1000\nconst MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\nconst MILLIS_PER_HALF_HOUR = 30 * MILLIS_PER_MINUTE\nconst MILLIS_PER_HOUR = 2 * MILLIS_PER_HALF_HOUR\n\nconst now = new Date(msg.payload.now)\nconst offset = MILLIS_PER_HALF_HOUR - Math.floor(Math.random() * MILLIS_PER_HOUR)\nconst time = new Date(\n    now.getFullYear(),\n    now.getMonth(),\n    now.getDate(),\n    msg.payload['settings/bedtime']\n).getTime()\n\nconst message = {}\n\nmessage.payload = time + offset,\nmessage.topic = 'daily/bedtime'\nmessage.retain = true\n\nnode.status({\n    text: new Date(message.payload).toLocaleTimeString(),\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 180,
        "wires": [
            [
                "46ac71815281ccea"
            ]
        ],
        "outputLabels": [
            "bedtime"
        ],
        "info": "Calculate a slightly randomized timestamp based on the values of\n`msg.payload.daily` and `msg.payload.settings/bedtime` as described\nbelow.\n\n# Input\n \n - timestamp for the current day in `msg.payload.daily`\n - value from the `Bedtime` dashboard control in\n   `msg.payload.settings/bedtime`\n- all other `msg` properties are ignored\n\n# Output\n\n- `msg.topic` set to `daily/bedtime`\n- `msg.payload` set to a timestamp as described below\n\n# Details\n\nThis `function` node receives input from a `join` node that combines the\ntimestamp for a given day with a value selected by use of a dropdown\ncontrol on the dashboard. It calculates a random offset of plus or minus\n30 minutes, adds that to the hour specified by the received value in\n`msg.payload.settings/bedtime` and calculates the timestamp for that\nhour on the day specified by the value received in `msg.payload.daily`,\nplacing it in `msg.payload` in the output message.\n"
    },
    {
        "id": "46ac71815281ccea",
        "type": "rbe",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 120,
        "wires": [
            [
                "4b3a06bb3281f1c5"
            ]
        ],
        "info": "Block messages unless `msg.payload` changes, treating each `msg.topic`\nindependently."
    },
    {
        "id": "d9f51cf712535848",
        "type": "join",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "76bbc731fb4262bd"
            ]
        ]
    },
    {
        "id": "76bbc731fb4262bd",
        "type": "function",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "time",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst now = msg.payload.now\nconst sunrise = msg.payload['daily/sunrise']\nconst sunset = msg.payload['daily/sunset']\nconst bedtime = msg.payload['daily/bedtime']\n\nconst position = suncalc.getPosition(\n    new Date(now),\n    LATITUDE,\n    LONGITUDE)\n\nconst message = {}\n\nif ((now <= sunrise) || (now >= bedtime)) {\n\n    message.payload = 'night'\n\n} else if (now >= sunset) {\n\n    message.payload = 'evening'\n\n} else if (position.altitude > 0.8) {\n\n    message.payload = 'midday'\n\n} else if (position.azimuth > 0) {\n\n    message.payload = 'afternoon'\n\n} else {\n\n    message.payload = 'morning'\n\n}\n\nnode.status({\n    text: message.payload,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nmessage.topic = 'timer/time'\nmessage.retain = true\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 930,
        "y": 320,
        "wires": [
            [
                "9a9fbaf721bdfb20"
            ]
        ]
    },
    {
        "id": "9a9fbaf721bdfb20",
        "type": "rbe",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1050,
        "y": 320,
        "wires": [
            [
                "46c44e33f918af63"
            ]
        ]
    },
    {
        "id": "de9d9eb71b136375",
        "type": "rbe",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "d9f51cf712535848"
            ]
        ]
    },
    {
        "id": "1182570b961cb1b0",
        "type": "switch",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "settings/bedtime",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "settings/bedtime",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 160,
        "wires": [
            [
                "2172861d6eca2d1c"
            ]
        ]
    },
    {
        "id": "48582d354b6b0fda",
        "type": "switch",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "^daily/(sunrise|sunset|bedtime)$",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^daily/(sunrise|sunset|bedtime)$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 360,
        "wires": [
            [
                "154766c193057414"
            ]
        ]
    },
    {
        "id": "903dfd8686a14a20",
        "type": "comment",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "assumes ${LATITUDE} and ${LONGITUDE} are defined",
        "info": "",
        "x": 1040,
        "y": 280,
        "wires": []
    },
    {
        "id": "4b3a06bb3281f1c5",
        "type": "websocket out",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 980,
        "y": 120,
        "wires": []
    },
    {
        "id": "0fa595499d40a3fd",
        "type": "websocket in",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "1182570b961cb1b0"
            ]
        ]
    },
    {
        "id": "386e624f284112c8",
        "type": "websocket in",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "48582d354b6b0fda"
            ]
        ]
    },
    {
        "id": "46c44e33f918af63",
        "type": "websocket out",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1180,
        "y": 320,
        "wires": []
    },
    {
        "id": "a4e1a5b908d33066",
        "type": "comment",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "assumes ${LATITUDE} and ${LONGITUDE} are defined",
        "info": "",
        "x": 1040,
        "y": 60,
        "wires": []
    },
    {
        "id": "cbcdf85a73052db5",
        "type": "function",
        "z": "1f224d5f7092fb57",
        "g": "a21835234a7481fe",
        "name": "sunrise | sunset",
        "func": "/*global suncalc*/\n\nconst LATITUDE = Number.parseFloat(env.get('LATITUDE'))\nconst LONGITUDE = Number.parseFloat(env.get('LONGITUDE'))\n\nconst now = new Date(msg.payload.now)\nconst sunrise = {}\nconst sunset = {}\n\nconst times = suncalc.getTimes(\n    // work around bug in suncalc\n    new Date(\n        now.getFullYear(),\n        now.getMonth(),\n        now.getDate(),\n        1,\n        1\n    ),\n    LATITUDE,\n    LONGITUDE\n)\n\nsunrise.payload = times.sunrise.getTime()\nsunrise.topic = 'daily/sunrise'\nsunrise.retain = true\n\nsunset.payload = times.sunset.getTime()\nsunset.topic = 'daily/sunset'\nsunset.retain = true\n\nconst status =\n    new Date(sunrise.payload).toLocaleTimeString() +\n    ' | ' +\n    new Date(sunset.payload).toLocaleTimeString()\n\nnode.status({\n    text: status,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [sunrise, sunset]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "46ac71815281ccea"
            ],
            [
                "46ac71815281ccea"
            ]
        ],
        "inputLabels": [
            "daily"
        ],
        "outputLabels": [
            "sunrise",
            "sunset"
        ],
        "info": "Use the [suncalc](https://www.npmjs.com/package/suncalc) package to\nobtain the times at which the sun rises and sets on a given day.\n\n_Note that this `function` node is placed downstream of a `join` in\norder to delay sending MQTT messages until after the connection to the\nbroker has been established; the only input data on which this function\nactually relies comes from the `inject` node which fires once when\nflows start and then every morning at 1AM._\n\n_Note also that this assumes:_\n\n_- `function` nodes are allowed to dynamically load the_ suncalc\n   _package_\n\n_- `${LATITUDE}` and `${LONGITUDE}` environment variables contain the\n  georgraphical coordinates to pass to `suncalc.getTimes()`_\n\n# Input\n\n- timestamp in `msg.payload.daily`\n- all other `msg` properties are ignored\n\n# Output\n\n1. sunrise\n   - `msg.payload` is the timestamp for sunrise as reported by _suncalc_\n   - `msg.topic` is `daily/sunrise`\n2. sunset\n   - `msg.payload` is the timestamp for sunset as reported by _suncalc_\n   - `msg.topic` is `daily/sunset`\n"
    },
    {
        "id": "154766c193057414",
        "type": "switch",
        "z": "1f224d5f7092fb57",
        "g": "0b0da0b6b3a2a19d",
        "name": "not retained",
        "property": "retain",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 360,
        "wires": [
            [
                "de9d9eb71b136375"
            ]
        ]
    },
    {
        "id": "6a9ac472018c38ea",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Morning Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "56393",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 260,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Morning Shades_."
    },
    {
        "id": "c8c9c1f0d8b62902",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Open All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7307",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 300,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Open All Shades_."
    },
    {
        "id": "9e961b1409432775",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Afternoon Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "42686",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Afternoon Shades_."
    },
    {
        "id": "db4f7c2c93cd8f30",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "Close All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "15208",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 380,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Close All Shades_."
    },
    {
        "id": "870608ff910feb60",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Morning",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\"},{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/9c1c7975-2f47-4552-bac8-c19b643cd678\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\"},{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/aea74e74-d544-4d08-ad71-3b6665045256\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\"}]",
                "type": "json"
            }
        ],
        "x": 540,
        "y": 500,
        "wires": []
    },
    {
        "id": "0e592700939a92aa",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "daily/theme",
        "property": "payload.daily/theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tribal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spooky",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jolly",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 550,
        "y": 600,
        "wires": [
            [
                "1cb0a0826e19ac25"
            ],
            [
                "8b2870e325e61ea1"
            ],
            [
                "541a0eff9f0235b7"
            ],
            [
                "4c3ffaa9eed2fd35"
            ]
        ],
        "info": "Trigger evening lighting automation for the specified _theme_."
    },
    {
        "id": "353cfc8157d414e1",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Night",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\"}]",
                "type": "json"
            }
        ],
        "x": 530,
        "y": 700,
        "wires": []
    },
    {
        "id": "1cb0a0826e19ac25",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Tribal",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/c4681d32-3368-43cd-9cf1-436132521068\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            }
        ],
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "8b2870e325e61ea1",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Spooky",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/70a0a8a6-b4b7-4b24-a9cf-0ecea0f359cc\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"},{\"topic\":\"resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"target\":\"send to ground floor hue\"}]",
                "type": "json"
            }
        ],
        "x": 760,
        "y": 560,
        "wires": []
    },
    {
        "id": "541a0eff9f0235b7",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Jolly",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/3ac45cbb-21c0-4c2f-8037-c40345537ce2\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/12571f23-7714-4b47-8e75-a3040389b788\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\"}]",
                "type": "json"
            }
        ],
        "x": 750,
        "y": 640,
        "wires": []
    },
    {
        "id": "4c3ffaa9eed2fd35",
        "type": "subflow:450f4de3c4f73b40",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "Standard",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/9b6935e2-f8ed-4f91-83a2-2bff1850da99\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\"}]",
                "type": "json"
            }
        ],
        "x": 760,
        "y": 720,
        "wires": []
    },
    {
        "id": "7adca925e9011e2f",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "put/powerview/scene",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 320,
        "wires": [
            [
                "c8fb3c01f10259ca"
            ]
        ]
    },
    {
        "id": "a19b812821bec622",
        "type": "rbe",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 350,
        "y": 160,
        "wires": [
            [
                "477b281b3f87fc89"
            ]
        ]
    },
    {
        "id": "477b281b3f87fc89",
        "type": "join",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "d4cab7825ba8bf11"
            ]
        ]
    },
    {
        "id": "aa9143d910c74bec",
        "type": "rbe",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 160,
        "wires": [
            [
                "85d575b4c5bfe117"
            ]
        ]
    },
    {
        "id": "2d18a9e3a7fd198a",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^settings/shades$|^settings/lighting$|^timer/time$|^daily/theme$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 160,
        "wires": [
            [
                "a19b812821bec622"
            ]
        ]
    },
    {
        "id": "679d6a0d2002bcb7",
        "type": "function",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "shades automation event",
        "func": "function copyMsg() {\n\n    return {\n        payload: msg.payload,\n        topic: msg.topic,\n        retain: false\n    }\n}\n\nif (msg.retain) {\n\n    return null\n}\n\nif (msg.topic != 'automation/trigger') {\n\n    return null\n\n}\n\nif (!msg.payload['settings/shades']) {\n\n    return null\n\n}\n\nswitch (msg.payload[\"timer/time\"]) {\n\n    case 'morning':\n\n        return [copyMsg(), null, null, null]\n\n    case 'midday':\n\n        return [null, copyMsg(), null, null]\n\n    case 'afternoon':\n\n        return [null, null, copyMsg(), null]\n\n    case 'night':\n\n        return [null, null, null, copyMsg()]\n\n    default:\n\n        return null\n\n}\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "6a9ac472018c38ea"
            ],
            [
                "c8c9c1f0d8b62902"
            ],
            [
                "9e961b1409432775"
            ],
            [
                "db4f7c2c93cd8f30"
            ]
        ],
        "outputLabels": [
            "morning",
            "midday",
            "afternoon",
            "night"
        ]
    },
    {
        "id": "5e838b011b496bb4",
        "type": "function",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "lighting automation event",
        "func": "function copyMsg() {\n\n    return {\n        payload: msg.payload,\n        topic: msg.topic,\n        retain: false\n    }\n}\n\nif (msg.retain) {\n\n    return null\n}\n\nif (msg.topic != 'automation/trigger') {\n\n    return null\n\n}\n\nif (!msg.payload['settings/lighting']) {\n\n    return null\n\n}\n\nswitch (msg.payload[\"timer/time\"]) {\n\n    case 'morning':\n\n        return [copyMsg(), null, null, null]\n\n    case 'evening':\n\n        return [null, copyMsg(), null, null]\n\n    case 'night':\n\n        return [null, null, copyMsg(), null]\n\n    default:\n\n        return null\n\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 600,
        "wires": [
            [
                "870608ff910feb60"
            ],
            [
                "0e592700939a92aa"
            ],
            [
                "353cfc8157d414e1"
            ]
        ],
        "outputLabels": [
            "morning",
            "evening",
            "night"
        ]
    },
    {
        "id": "90ecd878733cb225",
        "type": "websocket in",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "2d18a9e3a7fd198a"
            ]
        ]
    },
    {
        "id": "636d33f7c05cc8df",
        "type": "websocket out",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1180,
        "y": 160,
        "wires": []
    },
    {
        "id": "499f234a478a41e7",
        "type": "websocket out",
        "z": "bfdb5183ea783e85",
        "g": "3a0077281d6eefee",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "c3cac0049cccb7e7",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "3a0077281d6eefee",
        "name": "controls/refresh",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "controls/refresh",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 60,
        "wires": [
            [
                "499f234a478a41e7"
            ]
        ]
    },
    {
        "id": "c79b769649c2b419",
        "type": "status",
        "z": "bfdb5183ea783e85",
        "g": "3a0077281d6eefee",
        "name": "status: websocket out",
        "scope": [
            "499f234a478a41e7"
        ],
        "x": 140,
        "y": 60,
        "wires": [
            [
                "189c38230a6eb7a0"
            ]
        ]
    },
    {
        "id": "189c38230a6eb7a0",
        "type": "switch",
        "z": "bfdb5183ea783e85",
        "g": "3a0077281d6eefee",
        "name": "connect",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 60,
        "wires": [
            [
                "c3cac0049cccb7e7"
            ]
        ]
    },
    {
        "id": "c8fb3c01f10259ca",
        "type": "websocket out",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 940,
        "y": 320,
        "wires": []
    },
    {
        "id": "839872dec0a80cfa",
        "type": "websocket in",
        "z": "bfdb5183ea783e85",
        "g": "8326ae1a15518f8f",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "679d6a0d2002bcb7"
            ]
        ]
    },
    {
        "id": "244e029d9a276e82",
        "type": "websocket in",
        "z": "bfdb5183ea783e85",
        "g": "c2e3e9d2c97df2d0",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 600,
        "wires": [
            [
                "5e838b011b496bb4"
            ]
        ]
    },
    {
        "id": "d4cab7825ba8bf11",
        "type": "function",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "trigger automation",
        "func": "const payload = {}\n\npayload['settings/shades'] = msg.payload['settings/shades']\npayload['settings/lighting'] = msg.payload['settings/lighting']\npayload['daily/theme'] = msg.payload['daily/theme']\npayload['timer/time'] = msg.payload['timer/time']\n\nreturn {\n    payload: payload,\n    topic: 'automation/trigger',\n    retain: false\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "aa9143d910c74bec"
            ]
        ]
    },
    {
        "id": "85d575b4c5bfe117",
        "type": "change",
        "z": "bfdb5183ea783e85",
        "g": "9f074aa55117ee9d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 160,
        "wires": [
            [
                "636d33f7c05cc8df"
            ]
        ]
    },
    {
        "id": "9b22e1e38e67938b",
        "type": "comment",
        "z": "40413194443e96c6",
        "name": "https://motorisation.hde.nl/hd/powerview/general-guides/API/",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "2bf099ec37e84bbc",
        "type": "link call",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 670,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a250d71416af8250",
        "type": "link in",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "send to powerview",
        "links": [],
        "x": 130,
        "y": 140,
        "wires": [
            [
                "70e42b6637f4c865"
            ]
        ],
        "l": true
    },
    {
        "id": "70e42b6637f4c865",
        "type": "delay",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 310,
        "y": 140,
        "wires": [
            [
                "413305fe8cf8bc16"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the PowerView hub to 1 per\nsecond."
    },
    {
        "id": "413305fe8cf8bc16",
        "type": "http request",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "3b9aea255e25c86d",
                "450c11f088a3f9ee"
            ]
        ],
        "info": "Send `msg.url` as a `GET` request to the PowerView hub."
    },
    {
        "id": "3b9aea255e25c86d",
        "type": "function",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "validate",
        "func": "const message = {\n    topic: 'powerview/error',\n    payload: RED.util.cloneMessage(msg)\n}\n\nlet fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return message\n\n    }\n\n    if ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n        fill = 'red'\n        return message\n\n    }\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n        return message\n\n    }\n\n    return null\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 160,
        "wires": [
            [
                "9154f7fa8b08933f"
            ]
        ],
        "outputLabels": [
            "success"
        ],
        "info": "Block unless the response indicates an error occurred."
    },
    {
        "id": "450c11f088a3f9ee",
        "type": "link out",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "powerview response",
        "mode": "return",
        "links": [],
        "x": 660,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "7fb1bd1acb1ca5f7",
        "type": "function",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "model",
        "func": "let model = []\n\nfunction findScenes(roomId) {\n\n    const scenes = []\n\n    for (const scene of msg.payload.sceneData) {\n\n        if (scene.roomId == roomId) {\n\n            scenes.push({\n                name: scene.name,\n                id: scene.id\n            })\n        }\n    }\n\n    return scenes.sort((a, b) => {\n\n        return a.name.localeCompare(b.name)\n\n    })\n}\n\nfor (const room of msg.payload.roomData) {\n\n    const scenes = findScenes(room.id)\n\n    if (scenes.length > 0) {\n\n        model.push({\n            name: room.name,\n            id: room.id,\n            scenes: scenes\n        })\n    }\n}\n\nmodel = model.sort((a, b) => {\n\n    return a.name.localeCompare(b.name)\n\n})\n\nreturn {\n    payload: model,\n    topic: 'powerview/model',\n    retain: true\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "4e40e2700edff9ec"
            ]
        ]
    },
    {
        "id": "eb7123132bce19c7",
        "type": "join",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "7fb1bd1acb1ca5f7"
            ]
        ],
        "info": "Join messages containing `rooms` and `scenes` metadata."
    },
    {
        "id": "02eec7feccc1567d",
        "type": "subflow:699fdca4e881f8ec",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "Get Scenes",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            },
            {
                "name": "URI",
                "value": "/api/scenes/",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send to powerview",
                "type": "str"
            },
            {
                "name": "DATA",
                "value": "sceneData",
                "type": "str"
            },
            {
                "name": "ATTRIBUTE",
                "value": "sceneData",
                "type": "str"
            }
        ],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "eb7123132bce19c7"
            ]
        ]
    },
    {
        "id": "07a492e2d29b5dd3",
        "type": "subflow:699fdca4e881f8ec",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "Get Rooms",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            },
            {
                "name": "URI",
                "value": "/api/rooms/",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send to powerview",
                "type": "str"
            },
            {
                "name": "DATA",
                "value": "roomData",
                "type": "str"
            },
            {
                "name": "ATTRIBUTE",
                "value": "sceneData",
                "type": "str"
            }
        ],
        "x": 430,
        "y": 400,
        "wires": [
            [
                "eb7123132bce19c7"
            ]
        ]
    },
    {
        "id": "0710d650a741b921",
        "type": "switch",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "put/powerview/scene",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "put/powerview/scene",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 260,
        "wires": [
            [
                "8d706565bc654112"
            ]
        ]
    },
    {
        "id": "99ab390e30a9d634",
        "type": "switch",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "controls/refresh",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "controls/refresh",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 380,
        "wires": [
            [
                "02eec7feccc1567d",
                "07a492e2d29b5dd3"
            ]
        ]
    },
    {
        "id": "5080b46132584bf3",
        "type": "comment",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 1080,
        "y": 260,
        "wires": []
    },
    {
        "id": "2357258b01c15112",
        "type": "comment",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 1080,
        "y": 380,
        "wires": []
    },
    {
        "id": "54a31fbc4733c574",
        "type": "websocket in",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 260,
        "wires": [
            [
                "0710d650a741b921"
            ]
        ]
    },
    {
        "id": "62d44392a9aac7fc",
        "type": "websocket in",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "99ab390e30a9d634"
            ]
        ]
    },
    {
        "id": "9154f7fa8b08933f",
        "type": "websocket out",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 760,
        "y": 160,
        "wires": []
    },
    {
        "id": "4e40e2700edff9ec",
        "type": "websocket out",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 820,
        "y": 380,
        "wires": []
    },
    {
        "id": "8d706565bc654112",
        "type": "function",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "powerview url",
        "func": "return {\n    payload: null,\n    url: 'http://' +\n        env.get('POWERVIEW_ADDRESS') +\n        '/api/scenes?sceneId=' +\n        msg.payload\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "2bf099ec37e84bbc"
            ]
        ]
    },
    {
        "id": "9cf28d89e0f81966",
        "type": "discovery",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "topic": "",
        "service": "_hue._tcp",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "14b78c9b72d385fd"
            ]
        ]
    },
    {
        "id": "14b78c9b72d385fd",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "split by address",
        "func": "const messages = []\n\nfor (let address of msg.payload.addresses) {\n\n    const message = RED.util.cloneMessage(msg)\n\n    delete message.payload.addresses\n    message.topic = address\n    messages.push(message)\n\n}\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 100,
        "wires": [
            [
                "854fc957cc0aa798"
            ]
        ]
    },
    {
        "id": "854fc957cc0aa798",
        "type": "rbe",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "57e2d4b892263fc3"
            ]
        ]
    },
    {
        "id": "57e2d4b892263fc3",
        "type": "join",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "a8cede2bfeed191c"
            ]
        ]
    },
    {
        "id": "0ed14c935a7933e8",
        "type": "http request",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "06c952f588cb12f4",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 320,
        "wires": [
            [
                "f74128d99635d540"
            ]
        ],
        "info": "Send a HTTP `POST` request using TLS but without certificate validation\ndue to defects in the Hue Bridge API."
    },
    {
        "id": "f74128d99635d540",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "response",
        "func": "const messages = []\n\nfunction errorMessage(payload) {\n\n    return {\n        payload: payload,\n        topic: 'hue/' + msg.bridgeAddress + '/error',\n        retain: false\n    }\n}\n\nfunction successMessage(payload) {\n\n    return {\n        payload: payload,\n        topic: 'hue/' + msg.bridgeAddress + '/key',\n        retain: true\n    }\n}\n\nif (Array.isArray(msg.payload)) {\n\n    for (let result of msg.payload) {\n\n        if (Object.prototype.hasOwnProperty.call(result, 'success')) {\n\n            messages.push(successMessage(result.success.username))\n\n        }\n\n        if (Object.prototype.hasOwnProperty.call(result, 'error')) {\n\n            messages.push(errorMessage(result.error.description))\n\n        }\n    }\n\n} else {\n\n    messages.push(errorMessage(msg.payload))\n\n}\n\nnode.status({\n    text: Object.keys(messages).length,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 320,
        "wires": [
            [
                "2159eac5031ae752"
            ]
        ]
    },
    {
        "id": "3dbe561bfaf5bbf1",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "https://developers.meethue.com/develop/hue-api-v2/getting-started/",
        "info": "",
        "x": 700,
        "y": 280,
        "wires": []
    },
    {
        "id": "d3686879543e1951",
        "type": "subflow:85ed27d795e6e866",
        "z": "d3b34304591c64d7",
        "g": "f1e1b4bb5ddac24f",
        "name": "Ground Floor Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TITLE",
                "value": "Ground Floor Lighting",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 420,
        "wires": []
    },
    {
        "id": "05224ffb74b3f646",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "https://developers.meethue.com/develop/application-design-guidance/hue-bridge-discovery/",
        "info": "",
        "x": 910,
        "y": 60,
        "wires": []
    },
    {
        "id": "d046e6267c76dfe1",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "f1e1b4bb5ddac24f",
        "name": "assumes ${GROUND_FLOOR_HUE_ADDRESS} and ${GROUND_FLOOR_HUE_KEY} are defined",
        "info": "",
        "x": 600,
        "y": 420,
        "wires": []
    },
    {
        "id": "c16229f8f80c5a43",
        "type": "join",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 830,
        "y": 140,
        "wires": [
            [
                "8a2991eb5255cb54"
            ]
        ]
    },
    {
        "id": "8a2991eb5255cb54",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "model",
        "func": "const discovered = msg.payload.discovered || {}\nconst bridges = flow.get('bridges') || {}\n\nfor (let address in discovered) {\n\n    const bridge = bridges[address] || {}\n    const b = discovered[address]\n\n    for (let property in b) {\n\n        bridge[property] = b[property]\n\n    }\n\n    bridges[address] = bridge\n\n}\n\nfor (let topic in msg.payload) {\n\n    const matches = /^hue\\/([^ /]+)\\/status$/.exec(topic)\n\n    if (Array.isArray(matches) && (matches.length == 2)) {\n\n        const address = matches[1]\n        const bridge = bridges[address] || {}\n\n        bridge.status = msg.payload[topic]\n        bridges[address] = bridge\n\n    }\n}\n\nflow.set('bridges', bridges)\n\nconst model = []\n\nfor (let address in bridges) {\n\n    const bridge = bridges[address]\n\n    if (bridge.txtRecord) {\n\n        model.push({\n            id: bridge.txtRecord.bridgeid,\n            model: bridge.txtRecord.modelid,\n            name: bridge.name,\n            host: bridge.host,\n            address: address,\n            port: bridge.port,\n            status: bridge.status\n        })\n    }\n}\n\nreturn {\n    payload: model,\n    topic: 'hue/bridges',\n    retain: true\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 140,
        "wires": [
            [
                "7756c6eb9522da59"
            ]
        ]
    },
    {
        "id": "a8cede2bfeed191c",
        "type": "change",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "discovered",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "discovered",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 100,
        "wires": [
            [
                "c16229f8f80c5a43"
            ]
        ]
    },
    {
        "id": "90c4d02d576477e1",
        "type": "switch",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "^hue/[^/]+/status$",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^hue/[^/]+/status$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 180,
        "wires": [
            [
                "c16229f8f80c5a43"
            ]
        ]
    },
    {
        "id": "226b30949f9a903b",
        "type": "switch",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "put/hue/create-key",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "put/hue/create-key",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 320,
        "wires": [
            [
                "2626ba9e8d396f71"
            ]
        ]
    },
    {
        "id": "e923bea48eeed441",
        "type": "websocket in",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 480,
        "y": 180,
        "wires": [
            [
                "90c4d02d576477e1"
            ]
        ]
    },
    {
        "id": "35758e623450f0b1",
        "type": "websocket in",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "226b30949f9a903b"
            ]
        ]
    },
    {
        "id": "7756c6eb9522da59",
        "type": "websocket out",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1080,
        "y": 140,
        "wires": []
    },
    {
        "id": "2159eac5031ae752",
        "type": "websocket out",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "0f699ed605fadf59",
        "type": "subflow:85ed27d795e6e866",
        "z": "d3b34304591c64d7",
        "g": "b3c2354a4072ebba",
        "name": "Basement Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TITLE",
                "value": "Basement Lighting",
                "type": "str"
            }
        ],
        "x": 120,
        "y": 520,
        "wires": []
    },
    {
        "id": "048ec8eb41be82ae",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "b3c2354a4072ebba",
        "name": "assumes ${BASEMENT_HUE_ADDRESS} and ${BASEMENT_HUE_KEY} are defined",
        "info": "",
        "x": 640,
        "y": 520,
        "wires": []
    },
    {
        "id": "2626ba9e8d396f71",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "request",
        "func": "const address = msg.payload\n\nreturn {\n    bridgeAddress: address,\n    url: 'https://' + address + '/api',\n    payload: {\n        devicetype: 'nodered',\n        generateclientkey: true\n    },\n    method: 'POST'\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            [
                "0ed14c935a7933e8"
            ]
        ]
    }
]