[
    {
        "id": "e1d7dd3bdd3cf24a",
        "type": "tab",
        "label": "Broker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "94027c46c4bfae12",
        "type": "tab",
        "label": "Automation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6057c05b02d1aad0",
        "type": "tab",
        "label": "Initialize Settings",
        "disabled": false,
        "info": "When clients first connect, send settings events with default values if\nno retained settings are found.",
        "env": []
    },
    {
        "id": "d3b34304591c64d7",
        "type": "tab",
        "label": "Hue",
        "disabled": false,
        "info": "Interoperate with Philips Hue Bridges using local API. See <https://developers.meethue.com/develop/hue-api-v2/getting-started/> for more information.\n\nThis flow:\n\n- Uses mDNS to discover Hue bridges on the LAN and publishes\n  corresponding `hue/bridges` event messages for use by the dashboard's\n  front-end logic\n\n- Contains two instances of the _Hue API V2_ subflow, one each for\n  the Hue bridges specified by the `${GROUND_FLOOR_HUE_ADDRESS}` and\n  `${BASEMENT_HUE_ADDRESS}` environment variables",
        "env": []
    },
    {
        "id": "40413194443e96c6",
        "type": "tab",
        "label": "PowerView",
        "disabled": false,
        "info": "Interoperate with the PowerView hub whose IP address is specified by the\n`${POWERVIEW_ADDRESS}` environment variable.\n\nThis flow obtains the current configuration data from the hub and\npublishes an event message whose `msg.topic` is `powerview/model`\nand whose `msg.payload` contains a JSON object with the structure\nexpected by the front-end code for the dashboard. It also subscribes\nto `put/powerview/scene` messages and activates the PowerView scenes\nindicated by their payloads.\n\n## PowerView&reg; API\n\nNote that despite what the official documentation says, it is also\npossible to query a list of rooms, in addition to the documented query\nfor listing scenes. See [Undocumented Feature](#undocumented-feature),\nbelow.\n\nHere is a snapshot of\n<https://motorisation.hde.nl/hd/powerview/general-guides/API/>\nas of March 17, 2024:\n\n> ---\n> To connect a PowerView&reg; system to a home automation system a\n> PowerView&reg; Hub is required.\n>\n> The current hub implementation supports an HTTP REST API which is\n> described in this document. If you have an older hub, it is also\n> possible to make use of the API through a serial connection, which is\n> described here\n>\n> Currently the API is limited to commands for getting a list of scenes\n> and commands to activate scenes. These scenes need to be created in the\n> PowerView&reg; app first. When receiving a list of scenes from the hub the\n> scene names are base64 encoded. For proper identification they need to\n> be programmatically converted to unicode utf-8 readable text. Go\n> [here](https://www.base64decode.org/) for an online converter. Go\n> [here](#base64_encoding) for some code examples.\n>\n> ---\n> **PowerView&reg; HTTP API**\n>\n>> **IMPORTANT**\n>>\n>> Make sure your hub gets a reserved/fixed ip address from the dhcp\n>> server.\n>>\n>> The preferred method of setting a fixed IP address is IP address\n>> reservation based on MAC address in the home router (which should be\n>> the router with the dhcp server running)\n>>\n>> The hub ip and MAC address can be found using the PowerView app:\n>>\n>> 1. Open the side menu.\n>> 2. Select <Hub>\n>> 3. Select the currently connected hub\n>> 4. Select <hub info>\n>>\n>> A list should appear with both ip and MAC address displayed.\n>\n> ---\n> **Get a list of all available scenes**\n>\n> request:\n>\n> method: `GET`\n>\n> `api/scenes/`\n>\n> response example:\n>\n> ```\n> {\n>   \"sceneIds\":[7214,64073,15890,42747],\n>   \"sceneData\":[\n>     {\n>       \"id\":7214,\n>       \"name\":\"QWxsIGRvd24=\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":0,\n>       \"colorId\":2,\n>       \"iconId\":0\n>     },\n>     {\n>       \"id\":64073,\n>       \"name\":\"UGxpc3NlIDE=\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":1,\n>       \"colorId\":5,\n>       \"iconId\":0\n>     },\n>     {\n>       \"id\":15890,\n>       \"name\":\"QWxsIHVw\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":2,\n>       \"colorId\":0,\n>       \"iconId\":0\n>     },\n>     {\n>       \"id\":42747,\n>       \"name\":\"UGxpc3NlIDI=\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":3,\n>       \"colorId\":7,\n>       \"iconId\":0\n>     }\n>   ]\n> }\n> ```\n>\n> ---\n> **Activate a scene**\n>\n> request:\n>\n> method: `GET`\n>\n> `/api/scenes?sceneId=<sceneid>`  //replace <sceneid> with actual scene id.\n>\n> response example:\n>\n> ```\n> {\n>   \"scene\":{\"shadeIds\":[35523]}\n> }\n> ```\n>\n> **Base64 encoding**\n>\n> **Python**\n>\n> ```python\n> import base64\n>\n> def decode_base64(str):\n>     \"\"\"Convert base64 to unicode text\"\"\"\n>     return base64.b64decode(str).decode('utf-8')\n> ```\n>\n> **javascript**\n>\n> ```javascript\n> function decode_base64(str){\n>   // Converts incoming base64 to unicode text.\n>   return new Buffer(str, 'base64').toString('binary');\n> }\n> ```\n\n### Undocumented Feature\n\n**Get a list of all available rooms**\n\nrequest: `GET`\n\n`api/rooms`\n\nresponse example:\n\n```\n{\n    \"roomIds\":[\n        12345,\n        56789\n    ],\n    \"roomData\":[\n        {\n            \"order\":13,\n            \"name\":\"pR9Yj2g=\",\n            \"colorId\":3,\n            \"iconId\":50,\n            \"type\":0,\n            \"id\":12345\n        },\n        {\n            \"order\":10,\n            \"name\":\"GhH357==\",\n            \"colorId\":3,\n            \"iconId\":50,\n            \"type\":0,\n            \"id\":56789\n        }\n    ]\n}\n```\n",
        "env": []
    },
    {
        "id": "85ed27d795e6e866",
        "type": "subflow",
        "name": "Hue API V2",
        "info": "Encapsulate the flows that interoperate with a given Philips Hue Bridge",
        "category": "hue",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "KEY",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TITLE",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-api-v2",
            "type": "hue-api-v2",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Encapsulate logic to interoperate with a Philips Hue Bridge",
            "keywords": "node-red,philips-hue,hue,hue-api,hue-api-v2",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-lightbulb-o",
        "status": {
            "x": 1060,
            "y": 600,
            "wires": [
                {
                    "id": "ce519b683b6e6767",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "699fdca4e881f8ec",
        "type": "subflow",
        "name": "Get PowerView Metadata",
        "info": "Retrieve and parse metadata for a specified type of resource from a given PowerView hub",
        "category": "powerview",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "8f3bd16c7f353be0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 100,
                "wires": [
                    {
                        "id": "ca455aa5752d94d8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "URI",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TARGET",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "DATA",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-get-powerview-metadata",
            "type": "get-powerview-metadata",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Retrieve and parse metadata for a specified type of resource from a given PowerView hub",
            "keywords": "node-red,hunter-douglas,powerview",
            "license": "MIT"
        },
        "color": "#C7E9C0",
        "outputLabels": [
            "metadata"
        ],
        "icon": "font-awesome/fa-align-justify"
    },
    {
        "id": "450f4de3c4f73b40",
        "type": "subflow",
        "name": "Hue Automation",
        "info": "Send a series of commands to the\n[Hue Bridge API V2](https://developers.meethue.com/develop/hue-api-v2/).\nThe commands are created from the value of the `${COMMANDS}` subflow\nconfiguration variable.\n\nIn particular, each element of `${COMMANDS}` must contain `topic`,\n`payload`, `method` and `target` members. For example, if an instance\nof this subflow is configured with `${COMMANDS}` set to:\n\n```\n[\n    {\n        \"topic\": \"resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971\",\n        \"payload\": {\n            \"on\": {\n                \"on\": false\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    },\n    {\n        \"topic\": \"resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    },\n    {\n        \"topic\": \"resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\",\n        \"target\": \"send to ground floor hue\"\n    }\n]\n```\n\nthat instance will send messages to turn off the Hue `grouped_light`\nresource whose id is `bad8480b-b404-42d1-a9e7-a4a69f400971` and\nactivate the scenes whose id's are `5d507fb6-89f6-459a-b327-0fffd0c6dc48`\nand `48c39b9f-1599-4a5c-b7f6-bad6cad4029a`. It does so by invoking a\n`link call` node with `msg.target` set to `\"send to ground floor hue\"`.\n\n**Note:** This subflow is theoretically unnecessary since one could,\nin principle, define any desired lighting state as an individual scene\nbelonging to a particular room or zone using the Hue mobile app. In that\ncase, each instance of this subflow would correspond to a single command\nto activate a particular such scene. This subflow exists, in part, as a\nwork-around for well-known limitations in the Hue bridge in regards to\nthe number of devices per room or zone. In addition, this subflow\nallows for setting the state of combinations of lighting devices without\ncluttering up the view presented to users of the Hue app with lots of\nzones and scenes which would exist solely for the purposes of these\nNode-RED flows but which would rarely, if ever, make sense to activate\nmanually. Finally, it also provides a bit of future-proofing for\nchanges in the Hue API since Philips sometimes exposes new features in\nthe bridge API before they can be accessed directly in the mobile app.",
        "category": "hue",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "3aead3d3f53c86d6"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "COMMANDS",
                "type": "json",
                "value": "[]",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-lighting",
            "type": "hue-lighting",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Send messages controlling a particular combination of Hue lighting groups and scenes",
            "keywords": "node-red,philips-hue,hue,hue-api,hue-api-v2",
            "license": "MIT"
        },
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-cogs",
        "status": {
            "x": 260,
            "y": 120,
            "wires": [
                {
                    "id": "2ba586de1fbf441d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "0fd970345919b420",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": "discover hue bridges",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "color": "#000000"
        },
        "nodes": [
            "14b78c9b72d385fd",
            "854fc957cc0aa798",
            "57e2d4b892263fc3",
            "a8cede2bfeed191c",
            "c16229f8f80c5a43",
            "8a2991eb5255cb54",
            "90c4d02d576477e1",
            "e923bea48eeed441",
            "7756c6eb9522da59",
            "b0e9b513b0a450c3",
            "d3827e92f3158b11",
            "cb53ddf8e4322675",
            "61819845f9d42866",
            "24c5060618b2a3bf",
            "46957044b4a82aac",
            "55739f413f081a30",
            "0679559867ced9f2",
            "9e5139329b02df1e"
        ],
        "x": 14,
        "y": 19,
        "w": 1312,
        "h": 322
    },
    {
        "id": "23bf1f9635c44cc8",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": " initiate the client application key creation process on the hue bridge specified by msg.payload",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0ed14c935a7933e8",
            "f74128d99635d540",
            "226b30949f9a903b",
            "35758e623450f0b1",
            "2159eac5031ae752",
            "2626ba9e8d396f71"
        ],
        "x": 14,
        "y": 359,
        "w": 952,
        "h": 82
    },
    {
        "id": "0fb8e43c903b3506",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "send messages at a rate of no more than 1 per second to the Hue Bridge at ${ADDRESS} using ${KEY} as the client application key",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "color": "#000000"
        },
        "nodes": [
            "07d61ea24d59a251",
            "ccb8f8c4fd3333af",
            "a1a4ef6fbcea1cd4",
            "2dd6e02f993c8f04",
            "3635f7d1709b0fa7",
            "7a4ba2d58e8e1f70",
            "7bf3a0d5f7ee216b",
            "7189e8414abb8abf",
            "93a323937c189b13"
        ],
        "x": 14,
        "y": 19,
        "w": 1052,
        "h": 162
    },
    {
        "id": "96971e50c13ead01",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "subscribe to server-sent events from the Hue Bridge at ${ADDRESS} using ${KEY} as the client application key",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "label": true,
            "color": "#000000",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "5a1b87c5d08fa5d4",
            "12f058cdadbb39ce",
            "80bbf467c351320f",
            "d3e5044fe363855b",
            "5e338d73bb5c33fb",
            "153449edfaf38a67",
            "964ed66cfe05da8b",
            "4ab229c77e4ce0fe",
            "5e36497f30cb3265",
            "6ce6327771b66664",
            "f564e0e7691828da",
            "3c4dc36276340285",
            "2387a62701229e79",
            "f7841898977deb1b",
            "c3f7e150dea7e636",
            "cded354eec0287f2",
            "4f5d5c8a6961a27c",
            "9055d5f42e64e6d0",
            "531fbb9eb4631e85"
        ],
        "x": 14,
        "y": 199,
        "w": 1292,
        "h": 302
    },
    {
        "id": "f1e1b4bb5ddac24f",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": "monitor and control specific hue bridges",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d3686879543e1951",
            "0f699ed605fadf59"
        ],
        "x": 14,
        "y": 559,
        "w": 432,
        "h": 82
    },
    {
        "id": "9cf0457b813ca743",
        "type": "group",
        "z": "40413194443e96c6",
        "name": "activate the powerview scene whose id is specified by msg.payload",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2bf099ec37e84bbc",
            "0710d650a741b921",
            "54a31fbc4733c574",
            "8d706565bc654112"
        ],
        "x": 14,
        "y": 299,
        "w": 852,
        "h": 82,
        "info": "Dynamically create dashboard buttons corresponding to each scene\ndiscovered by querying a _PowerView_ hub."
    },
    {
        "id": "cb106476337f4d38",
        "type": "group",
        "z": "40413194443e96c6",
        "name": "send commands to the powerview hub at a rate of no more than 1 per second",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a250d71416af8250",
            "70e42b6637f4c865",
            "413305fe8cf8bc16",
            "3b9aea255e25c86d",
            "450c11f088a3f9ee",
            "9154f7fa8b08933f"
        ],
        "x": 14,
        "y": 159,
        "w": 912,
        "h": 122
    },
    {
        "id": "9823c620ddf3d6e0",
        "type": "group",
        "z": "40413194443e96c6",
        "name": "poweview hub",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7fb1bd1acb1ca5f7",
            "eb7123132bce19c7",
            "02eec7feccc1567d",
            "07a492e2d29b5dd3",
            "99ab390e30a9d634",
            "62d44392a9aac7fc",
            "4e40e2700edff9ec",
            "ebfab5beb0190193",
            "97566d661d35c324",
            "0cd6a253ead58c18"
        ],
        "x": 14,
        "y": 399,
        "w": 1132,
        "h": 162
    },
    {
        "id": "4893dd6a2321040d",
        "type": "group",
        "z": "85ed27d795e6e866",
        "name": "status",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "02be9eee8ee84874",
            "83f1cdfad9fc4846",
            "a45d7fdb0d022401",
            "4b9c1c4c1a78af55",
            "0b223f6872d96c8f",
            "fdc1f995f016ddba"
        ],
        "x": 14,
        "y": 519,
        "w": 812,
        "h": 122
    },
    {
        "id": "fa261bdde51028d4",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": "provide hue keys to dashboard",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "19b662d5ee4b5a2f",
            "16e21e0afb427d76",
            "ce505f3a3d6ec359"
        ],
        "x": 14,
        "y": 459,
        "w": 472,
        "h": 82
    },
    {
        "id": "165c6266935e206f",
        "type": "group",
        "z": "e1d7dd3bdd3cf24a",
        "name": "websocket based publish / subscribe message broker with semantics inspired by mqtt",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b48f13f63fadba17",
            "e1c10e3b6608de71",
            "e69d5ec739695570",
            "5f09f67803464fe9",
            "1b10e2f1524c44ef",
            "e450663aac44ed28",
            "032d5842e53c6015",
            "9cb4a587d2d04193"
        ],
        "x": 14,
        "y": 19,
        "w": 712,
        "h": 202,
        "info": "Broadcast messages received from any client to all clients. Note that\nall properties other than `msg._session` and `msg.retain` are\ntransmitted directly from the publisher to all subscribers.\n\n- Removes `msg._session` entirely, in the case of initially published\n  messages.\n\n- Handles `msg.topic` and `msg.retain` in a fashion inspired by MQTT.\n\nIf a client publishes a message with `msg.retain` set to `true`, the\n`retain` function node saves a clone of the message in flow context\nusing a file-system backed context store using `msg.topic` as the key.\nIt then sets `msg.retain` to `false` before broadcasting the message\nto subscribed clients.\n\nEach time a client connects, the `retained` function node sends that\nclient all currently stored messages with `msg.retain` set to `true`.\n\nRetained messages' contents can be updated by sending subsequent\nmessages with the same `msg.topic` and `msg.retain` set to `true`.\n\nRetained messages can be deleted by sending subsequent messages with\nthe same `msg.topic`, `msg.retain` set to `true` and `msg.payload`\nset to the empty string (`''`)."
    },
    {
        "id": "b10eb6ebfd377efe",
        "type": "group",
        "z": "94027c46c4bfae12",
        "name": "send timer events over the course of each day",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0497e0ed333e8f23",
            "8624deaf4bee22fa",
            "47acab248c4d8501",
            "0816fe94f5858846",
            "9977146ce026810e",
            "106ee66b66de58ab",
            "6792ab0a12231e4e",
            "21c4dba2bb5d0e54",
            "7cf8caea790c9792",
            "e6fc90237bd5a5e9",
            "c3cac0049cccb7e7",
            "c79b769649c2b419",
            "189c38230a6eb7a0",
            "0c57cb4bce44a11a",
            "3cbcdb02b5e451a3",
            "499de1cc5ab65c53",
            "869ada541db92710"
        ],
        "x": 14,
        "y": 19,
        "w": 1292,
        "h": 262,
        "info": "Subscribe to settings change events. Send `automation/trigger` events up\nto five times per day, at: sunrise, the start of midday, the start of\nafternoon, sunset and bedtime.\n\n- The times for sunrise and sunset are obtained directly from\n  [`suncalc.getTimes()`](https://github.com/mourner/suncalc#sunlight-times)\n\n- The times for midday and afternoon are determined using the position\n  of the sun over the course of the current day as reported by\n  [`suncalc.getPosition()`](https://github.com/mourner/suncalc#sun-position)\n\n- The time for bedtime varies randomly each day, as described below\n\nThe `${LATITUDE}` and `${LONGITUDE}` environment variables must be set\nto the home's geographic coordinates for use with `suncalc`.\n\nMidday starts when the sun first reaches an altitude of 0.8 radians. No\nmidday will be sent on a given day if the sun never reaches that\naltitude for the specified `${LATITUDE}`.\n\nAfternoon starts when the sun's azimuth is greater than 0 and its\naltitude first drops below 0.8 radians. For days on which the altitude\nnever reaches 0.8, this will be as soon after sunrise as the sun starts\nto shine more from the west than the east.\n\nBedtime is randomized each day, constrained to be within &PlusMinus;30\nminutes of the value for `settings/bedtime`.\n\nNote that the inclusion of midday and afternoon and the rules for\ndetermining when they occur on a given day were determined empirically\nfor a particular house with 4 parallel walls, aligned more or less\nexactly with the cardinal compass directions at a particular latitude.\nIt is also influenced by the size of that house's rather substantial\neaves shading the east- and west-facing windows. They might need\nadjustment or an entirely different set of events for a different\nstructure at a different location. The goal of all this is to trigger\nautomation to control lighting and motorized window coverings in such\na way that maximizes the times of day at which the view of the outside\nworld can be enjoyed while optimizing the lighting and window coverings\nfor comfort and energy efficiency during times of day when the sun\nshines too directly into the windows. "
    },
    {
        "id": "8326ae1a15518f8f",
        "type": "group",
        "z": "94027c46c4bfae12",
        "name": "window shade automation",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "color": "#000000"
        },
        "nodes": [
            "6a9ac472018c38ea",
            "9e961b1409432775",
            "db4f7c2c93cd8f30",
            "7adca925e9011e2f",
            "679d6a0d2002bcb7",
            "839872dec0a80cfa",
            "48891106bb0c15f3",
            "2faadc63ef5e77d2",
            "6d027828f94cb558",
            "97324173f5cd31d1",
            "befa2aee7b7c68f0",
            "cc0f759f7fc83125",
            "f0fd3673cca0dbde",
            "bc4239a2638e560d",
            "e471a1ddbc9ef198",
            "0a76f5d385da96d7",
            "9c763cec842003b4",
            "11cc62548c1ebf9e",
            "8f3017ac0fd35db7",
            "b5eb05ffb31db5ed",
            "c8fb3c01f10259ca"
        ],
        "x": 14,
        "y": 299,
        "w": 1372,
        "h": 282,
        "info": "Activate the corresponding PowerView scene upon receipt of of each\n`automation/trigger` event"
    },
    {
        "id": "c2e3e9d2c97df2d0",
        "type": "group",
        "z": "94027c46c4bfae12",
        "name": "lighting automation",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "870608ff910feb60",
            "0e592700939a92aa",
            "353cfc8157d414e1",
            "1cb0a0826e19ac25",
            "8b2870e325e61ea1",
            "541a0eff9f0235b7",
            "4c3ffaa9eed2fd35",
            "5e838b011b496bb4",
            "244e029d9a276e82"
        ],
        "x": 14,
        "y": 599,
        "w": 772,
        "h": 202,
        "info": "Handle lighting automation trigger events\n\n| Bridge | Address |\n|-|-|\n| Basement | 192.168.1.34 |\n| Ground Floor | 192.168.1.12 |\n\n| Room / Zone   | Grouped Light Id                     |\n|---------------|--------------------------------------|\n| Main Bathroom | aea74e74-d544-4d08-ad71-3b6665045256 |\n| Main Floor    | 9c1c7975-2f47-4552-bac8-c19b643cd678 |\n| Exterior      | a8498fe0-27a4-446b-9350-d236c7c663e1 |\n\n| Group         | Scene      | Scene Id                             |\n|---------------|------------|--------------------------------------|\n| Exterior      | Bright     | 041b6097-268c-4ea0-9e93-39c5c68ad2a7 |\n| Exterior      | Sunset     | 6918db34-c83f-4e37-9581-8d4255bfd1f8 |\n| Exterior      | Tribal     | e9503c3a-16b3-49ae-a4f9-2f6074d67be0 |\n| Exterior      | Spooky     | 85aef9e7-9805-4f07-afc9-80aa14e7be61 |\n| Exterior      | Jolly      | a1a2735c-def7-4db7-8d8e-bebe2a7e2200 |\n| Main Bathroom | Nightlight | 5d507fb6-89f6-459a-b327-0fffd0c6dc48 |\n| Main Floor    | Bright     | 8c5f011c-bc6f-49a8-8d82-9d1db302c87c |\n| Main Floor    | Sunset     | 6eff0801-01e2-4803-9840-e31c06cee079 |\n| Main Floor    | Nightlight | 48c39b9f-1599-4a5c-b7f6-bad6cad4029a |\n| Main Floor    | Jolly      | 3ac45cbb-21c0-4c2f-8037-c40345537ce2 |\n\nTo turn off the _Exterior_ zone and activate the _Nightlight_ scene in each of the _Main Bathroom_ and _Main Floor_:\n\n```json\n[\n    {\n        \"topic\": \"put/hue/192.168.1.12/resource/grouped_light/a8498fe0-27a4-446b-9350-d236c7c663e1\",\n        \"payload\": {\n            \"on\": {\n                \"on\": false\n            }\n        },\n        \"method\": \"PUT\"\n    },\n    {\n        \"topic\": \"put/hue/192.168.1.12/resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\"\n    },\n    {\n        \"topic\": \"put/hue/192.168.1.12/resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a\",\n        \"payload\": {\n            \"recall\": {\n                \"action\": \"active\"\n            }\n        },\n        \"method\": \"PUT\"\n    }\n]\n```"
    },
    {
        "id": "f33001c4a3f90bd3",
        "type": "group",
        "z": "94027c46c4bfae12",
        "name": "",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b044e7bab42607f8"
        ],
        "x": 874,
        "y": 639,
        "w": 452,
        "h": 82
    },
    {
        "id": "d14a8a332e18c919",
        "type": "group",
        "z": "40413194443e96c6",
        "name": "",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "9b22e1e38e67938b",
            "5080b46132584bf3"
        ],
        "x": 14,
        "y": 19,
        "w": 492,
        "h": 122
    },
    {
        "id": "b1c25d211c540da7",
        "type": "group",
        "z": "d3b34304591c64d7",
        "name": "",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "05224ffb74b3f646",
            "d046e6267c76dfe1",
            "1867621f8f44eff1",
            "3dbe561bfaf5bbf1",
            "3479fc4d500c7fa3"
        ],
        "x": 494,
        "y": 459,
        "w": 732,
        "h": 242
    },
    {
        "id": "8ff3dbba8ae94edb",
        "type": "group",
        "z": "6057c05b02d1aad0",
        "name": "reset watchdog timers when settings messges arrive",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2b03bb375cf8a67b",
            "34d16eacb94f3e0a",
            "c556cb062dc66d2a",
            "148d79087235cd86",
            "70d2ad7cf7335e75",
            "c1f4e496380951b9",
            "a855c1550339c122"
        ],
        "x": 34,
        "y": 459,
        "w": 772,
        "h": 162
    },
    {
        "id": "571a5373c51d8862",
        "type": "group",
        "z": "6057c05b02d1aad0",
        "name": "set watchdog timers when websocket connects",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a00aefc7eab1e6a6",
            "1d8b910fae3ff2a8",
            "6a55581296547a51",
            "5e9431336f357250",
            "821be014e963dc51",
            "4b7ff41599bc5342"
        ],
        "x": 34,
        "y": 19,
        "w": 792,
        "h": 122
    },
    {
        "id": "6cbb92fa530f2a8d",
        "type": "group",
        "z": "6057c05b02d1aad0",
        "name": "automation settings watchdog timers",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0cfb70bafb2a3428",
            "96f8511f1df7faeb",
            "3773e4defea6a3bc",
            "46732b168c58f0e7",
            "ed80322f1fe4a167",
            "5a096d86dd501f10",
            "7c3c09155bb047cb",
            "1c130fa5c6f4fb9e",
            "8df09ed123e9dda6",
            "6e6428d2eeca04bd",
            "146a87a644d4c618",
            "18e0549eb96bd879",
            "9cdaafc330c26d06",
            "2be3f542ce0a582e"
        ],
        "x": 34,
        "y": 159,
        "w": 852,
        "h": 282
    },
    {
        "id": "ebfab5beb0190193",
        "type": "junction",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "x": 440,
        "y": 480,
        "wires": [
            [
                "02eec7feccc1567d",
                "07a492e2d29b5dd3",
                "0cd6a253ead58c18"
            ]
        ]
    },
    {
        "id": "431414ce08ebb3c0",
        "type": "websocket-listener",
        "z": "e1d7dd3bdd3cf24a",
        "path": "/broker",
        "wholemsg": "true"
    },
    {
        "id": "06c952f588cb12f4",
        "type": "tls-config",
        "name": "Ignore Server Certificate",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "b46802b9cb5603b3",
        "type": "websocket-client",
        "path": "${BROKER_URL}",
        "tls": "",
        "wholemsg": "true",
        "hb": "5",
        "subprotocol": ""
    },
    {
        "id": "07d61ea24d59a251",
        "type": "delay",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "93a323937c189b13"
            ]
        ]
    },
    {
        "id": "ccb8f8c4fd3333af",
        "type": "http request",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "06c952f588cb12f4",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 100,
        "wires": [
            [
                "a1a4ef6fbcea1cd4",
                "2dd6e02f993c8f04"
            ]
        ]
    },
    {
        "id": "a1a4ef6fbcea1cd4",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "validate",
        "func": "function setTopic(topic) {\n\n    msg.topic = 'hue/' + env.get('ADDRESS') + '/' + topic\n    return msg\n\n}\n\nif (!Number.isInteger(msg.statusCode)) {\n\n    return setTopic('error')\n\n}\n\nif ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n    return setTopic('error')\n\n}\n\nif (!Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\n\n    return setTopic('error')\n\n}\n\nif (msg.payload.data.length == 0) {\n\n    return setTopic('error')\n\n}\n\nif (!Object.prototype.hasOwnProperty.call(msg.payload, 'errors')) {\n\n    return setTopic('error')\n\n}\n\nfor (let error of msg.payload.errors) {\n\n    node.warn(error)\n\n}\n\nif (msg.payload.errors.length != 0) {\n\n    // work-around for frequent spurious \"error\" results from hue bridge\n    for (let error of msg.payload.errors) {\n\n        if (!/^device \\(.+\\) is \".+\", command \\(.+\\) may not have effect$/.exec(error.description)) {\n\n            return setTopic('warning')\n\n        }\n    }\n}\n\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 140,
        "wires": [
            [
                "7bf3a0d5f7ee216b"
            ]
        ]
    },
    {
        "id": "2dd6e02f993c8f04",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 60,
        "wires": [
            [
                "7189e8414abb8abf"
            ]
        ]
    },
    {
        "id": "5a1b87c5d08fa5d4",
        "type": "delay",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 280,
        "wires": [
            [
                "12f058cdadbb39ce"
            ]
        ]
    },
    {
        "id": "12f058cdadbb39ce",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "request",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 280,
        "wires": [
            [
                "80bbf467c351320f"
            ]
        ]
    },
    {
        "id": "80bbf467c351320f",
        "type": "link call",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "links": [
            "7a4ba2d58e8e1f70"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "d3e5044fe363855b"
            ]
        ]
    },
    {
        "id": "d3e5044fe363855b",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "format event",
        "func": "// clear out cached resources\nconst address = env.get('ADDRESS')\nconst hue = flow.get('$parent.hue') || {}\nconst bridge = hue[address] || {}\nbridge.resources = {}\nhue[address] = bridge\nflow.set('$parent.hue', hue)\n\nconst updates = [{ type: 'update', data: msg.payload }]\nconst event = { type: 'message', data: JSON.stringify(updates) }\n\nreturn {\n    payload: event,\n    topic: 'message'\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ]
        ],
        "outputLabels": [
            "ready"
        ]
    },
    {
        "id": "5e338d73bb5c33fb",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "persist data",
        "func": "const address = env.get('ADDRESS')\nconst key = '$parent.hue'\nconst hue = flow.get(key) || {}\nconst bridge = hue[address] || {}\nconst TOPIC = 'hue/' + address\nconst resources = {}\nconst data = JSON.parse(msg.payload.data)\nconst messages = []\n\nresources.payload = bridge.resources || {}\n\nfor (let datum of data) {\n\n    for (let value of datum.data) {\n\n        const message = {\n            topic: TOPIC + '/resource/' + value.type + '/' + value.id,\n            retain: false\n        }\n\n        const category = resources.payload[value.type] || {}\n        let resource = category[value.id] || {}\n\n        switch (datum.type) {\n\n            case 'add':\n            case 'update':\n\n                for (let property in value) {\n\n                    resource[property] = value[property]\n                }\n\n                category[value.id] = message.payload = resource\n                break\n\n            case 'delete':\n\n                delete category[value.id]\n                message.payload = ''\n                break\n\n            default:\n\n                node.warn(JSON.stringify(datum, undefined, 1))\n                break\n\n        }\n\n        resources.payload[value.type] = category\n        messages.push(message)\n\n    }\n}\n\nbridge.resources = resources.payload\nhue[address] = bridge\nflow.set(key, hue)\nreturn [resources, messages]\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 320,
        "wires": [
            [
                "f7841898977deb1b"
            ],
            [
                "964ed66cfe05da8b"
            ]
        ],
        "outputLabels": [
            "resources",
            ""
        ]
    },
    {
        "id": "153449edfaf38a67",
        "type": "EventSource",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "5e338d73bb5c33fb"
            ],
            [
                "4ab229c77e4ce0fe"
            ],
            [
                "5e36497f30cb3265"
            ]
        ]
    },
    {
        "id": "964ed66cfe05da8b",
        "type": "rbe",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "4f5d5c8a6961a27c"
            ]
        ]
    },
    {
        "id": "4ab229c77e4ce0fe",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "hue/${ADDRESS}/onopen",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "hue/${ADDRESS}/onopen",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 380,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "5e36497f30cb3265",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "hue/${ADDRESS}/onerror",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "hue/${ADDRESS}/onerror",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 440,
        "wires": [
            [
                "964ed66cfe05da8b"
            ]
        ]
    },
    {
        "id": "6ce6327771b66664",
        "type": "complete",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "format event",
        "scope": [
            "d3e5044fe363855b"
        ],
        "uncaught": false,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "9055d5f42e64e6d0"
            ]
        ]
    },
    {
        "id": "f564e0e7691828da",
        "type": "complete",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "close",
        "scope": [
            "531fbb9eb4631e85"
        ],
        "uncaught": false,
        "x": 90,
        "y": 280,
        "wires": [
            [
                "5a1b87c5d08fa5d4"
            ]
        ]
    },
    {
        "id": "f7841898977deb1b",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "model",
        "func": "const ADDRESS = env.get('ADDRESS')\nconst TOPIC = 'hue/' + ADDRESS\nconst MODEL = TOPIC + '/model'\nconst PUT = 'put/' + TOPIC + '/resource'\nconst hue = flow.get('$parent.hue') || {}\nconst bridge = hue[ADDRESS] ||{}\n\nconst message = {\n    payload: {\n        groups: [],\n        title: env.get('TITLE'),\n        address: ADDRESS\n    },\n    topic: MODEL,\n    retain: true\n}\n\nfunction findOwner(grouped_light) {\n\n    const groups = msg.payload[grouped_light.owner.rtype]\n\n    if (Object.prototype.hasOwnProperty.call(groups, grouped_light.owner.rid)) {\n\n        return groups[grouped_light.owner.rid]\n\n    }\n\n    throw 'no container found for grouped_light ' + grouped_light.id\n\n}\n\nfunction findScenes(owner) {\n\n    const scenes = []\n\n    for (let sceneId in msg.payload.scene) {\n\n        const scene = msg.payload.scene[sceneId]\n\n        if (scene.group.rid == owner.id) {\n\n            scene.value = PUT + '/scene/' + scene.id\n            scenes.push(scene)\n\n        }\n    }\n\n    return scenes.sort((a, b) => {\n\n        return a.metadata.name.localeCompare(b.metadata.name)\n\n    })\n\n}\n\nfor (let grouped_light_id in msg.payload.grouped_light) {\n\n    const grouped_light = msg.payload.grouped_light[grouped_light_id]\n    const owner = findOwner(grouped_light)\n    const scenes = findScenes(owner)\n\n    message.payload.groups.push({\n        grouped_light: grouped_light,\n        owner: owner,\n        scenes: scenes,\n        name: (owner.metadata ? owner.metadata.name : 'All Lights'),\n        value: PUT + '/grouped_light/' + grouped_light.id\n    })\n\n}\n\nmessage.payload.groups = message.payload.groups.sort((a, b) => {\n\n    return a.name.localeCompare(b.name)\n\n})\n\nbridge.model = message.payload\nhue[ADDRESS] = bridge\nflow.set('$parent.hue', hue)\n\nreturn message",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "4f5d5c8a6961a27c"
            ]
        ]
    },
    {
        "id": "3c4dc36276340285",
        "type": "comment",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "https://www.npmjs.com/package/@parasaurolophus/node-red-eventsource",
        "info": "",
        "x": 300,
        "y": 240,
        "wires": []
    },
    {
        "id": "3635f7d1709b0fa7",
        "type": "comment",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 230,
        "y": 60,
        "wires": []
    },
    {
        "id": "2387a62701229e79",
        "type": "link call",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "",
        "links": [
            "7a4ba2d58e8e1f70"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 460,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c3f7e150dea7e636",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "dispatch",
        "func": "if (msg.topic == 'controls/refresh') {\n\n    return [\n        { payload: msg.payload },\n        null\n    ]\n\n}\n\nconst re = new RegExp('^put/hue/' + env.get('ADDRESS') + '/(resource/.+)$')\nconst matches = re.exec(msg.topic)\n\nif (Array.isArray(matches) && (matches.length == 2)) {\n\n    return [\n        null,\n        {\n            payload: msg.payload,\n            topic: matches[1],\n            method: msg.method\n        }\n    ]\n\n}\n\nreturn null",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 440,
        "wires": [
            [
                "531fbb9eb4631e85"
            ],
            [
                "2387a62701229e79"
            ]
        ],
        "outputLabels": [
            "refresh",
            "put"
        ]
    },
    {
        "id": "ce519b683b6e6767",
        "type": "link in",
        "z": "85ed27d795e6e866",
        "name": "status",
        "links": [
            "fdc1f995f016ddba"
        ],
        "x": 970,
        "y": 600,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "02be9eee8ee84874",
        "type": "status",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "eventsource",
        "scope": [
            "153449edfaf38a67"
        ],
        "x": 110,
        "y": 580,
        "wires": [
            [
                "4b9c1c4c1a78af55",
                "fdc1f995f016ddba"
            ]
        ]
    },
    {
        "id": "83f1cdfad9fc4846",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "hue/${ADDRESS}/status",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 560,
        "wires": [
            [
                "a45d7fdb0d022401"
            ]
        ]
    },
    {
        "id": "cded354eec0287f2",
        "type": "websocket in",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "c3f7e150dea7e636"
            ]
        ]
    },
    {
        "id": "7a4ba2d58e8e1f70",
        "type": "link in",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "send to bridge",
        "links": [],
        "x": 110,
        "y": 100,
        "wires": [
            [
                "07d61ea24d59a251"
            ]
        ],
        "l": true
    },
    {
        "id": "7bf3a0d5f7ee216b",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "4f5d5c8a6961a27c",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1220,
        "y": 320,
        "wires": []
    },
    {
        "id": "a45d7fdb0d022401",
        "type": "websocket out",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 740,
        "y": 560,
        "wires": []
    },
    {
        "id": "7189e8414abb8abf",
        "type": "link out",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "response",
        "mode": "return",
        "links": [],
        "x": 980,
        "y": 60,
        "wires": [],
        "l": true
    },
    {
        "id": "4b9c1c4c1a78af55",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(status.text)",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "status",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "0b223f6872d96c8f"
            ]
        ]
    },
    {
        "id": "0b223f6872d96c8f",
        "type": "rbe",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 430,
        "y": 560,
        "wires": [
            [
                "83f1cdfad9fc4846"
            ]
        ]
    },
    {
        "id": "9055d5f42e64e6d0",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "open",
        "func": "return {\n    payload: {\n        url: 'https://' + env.get('ADDRESS') + '/eventstream/clip/v2',\n        initDict: {\n            withCredentials: false,\n            https: {\n                rejectUnauthorized: false\n            },\n            headers: {\n                'hue-application-key': env.get('KEY')\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "93a323937c189b13",
        "type": "function",
        "z": "85ed27d795e6e866",
        "g": "0fb8e43c903b3506",
        "name": "request",
        "func": "const message = RED.util.cloneMessage(msg)\n\nmessage.url ='https://' + env.get('ADDRESS') + '/clip/v2/' + msg.topic\nmessage.headers = { \"hue-application-key\": env.get('KEY') }\n\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "ccb8f8c4fd3333af"
            ]
        ]
    },
    {
        "id": "531fbb9eb4631e85",
        "type": "change",
        "z": "85ed27d795e6e866",
        "g": "96971e50c13ead01",
        "name": "close",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 420,
        "wires": [
            [
                "153449edfaf38a67"
            ]
        ]
    },
    {
        "id": "fdc1f995f016ddba",
        "type": "link out",
        "z": "85ed27d795e6e866",
        "g": "4893dd6a2321040d",
        "name": "status",
        "mode": "link",
        "links": [
            "ce519b683b6e6767"
        ],
        "x": 250,
        "y": 600,
        "wires": [],
        "l": true
    },
    {
        "id": "02eb116aa3a7efad",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('ADDRESS') & $env('URI')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "TARGET",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "a2ce2f10f0cbc3b4"
            ]
        ],
        "info": "Set `msg.url` to request the list of scenes from the PowerView hub."
    },
    {
        "id": "a2ce2f10f0cbc3b4",
        "type": "link call",
        "z": "699fdca4e881f8ec",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "30",
        "x": 440,
        "y": 100,
        "wires": [
            [
                "4597056c8e33d1d2"
            ]
        ]
    },
    {
        "id": "4597056c8e33d1d2",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$lookup(payload, $env('DATA'))",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "a4b2cb7314b93cec"
            ]
        ],
        "info": "Set `msg.payload` to `msg.payload.sceneData`."
    },
    {
        "id": "a4b2cb7314b93cec",
        "type": "split",
        "z": "699fdca4e881f8ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 100,
        "wires": [
            [
                "e89d138990a2c571"
            ]
        ],
        "info": "Divide array into a sequence of individual messages."
    },
    {
        "id": "e89d138990a2c571",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "decode name",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"name\":$base64decode(payload.name),\"id\":payload.id,\"roomId\":payload.roomId}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 100,
        "wires": [
            [
                "09ed6328f31946db"
            ]
        ],
        "info": "Extract the salient metadata into `msg.payload`."
    },
    {
        "id": "09ed6328f31946db",
        "type": "join",
        "z": "699fdca4e881f8ec",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 990,
        "y": 100,
        "wires": [
            [
                "ca455aa5752d94d8"
            ]
        ],
        "info": "Join previously split messages back into an array."
    },
    {
        "id": "ca455aa5752d94d8",
        "type": "change",
        "z": "699fdca4e881f8ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "DATA",
                "tot": "env",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 100,
        "wires": [
            []
        ],
        "info": "Set `msg.topic` to `scenes`."
    },
    {
        "id": "6363f7176ee29fbb",
        "type": "comment",
        "z": "699fdca4e881f8ec",
        "name": "retrieve and parse metadata for a specified type of resource from a given PowerView hub",
        "info": "",
        "x": 330,
        "y": 40,
        "wires": []
    },
    {
        "id": "8f3bd16c7f353be0",
        "type": "function",
        "z": "699fdca4e881f8ec",
        "name": "clone",
        "func": "return RED.util.cloneMessage(msg)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 100,
        "wires": [
            [
                "02eb116aa3a7efad"
            ]
        ]
    },
    {
        "id": "3aead3d3f53c86d6",
        "type": "function",
        "z": "450f4de3c4f73b40",
        "name": "commands",
        "func": "const messages = []\n\nfor (let command of env.get('COMMANDS')) {\n\n    const message = RED.util.cloneMessage(msg)\n\n    message.payload = command.payload\n    message.topic = command.topic\n    message.method = command.method\n    messages.push(message)\n\n}\n\nnode.status({\n    text: messages.length,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            [
                "cae7ad773f3664cb"
            ]
        ]
    },
    {
        "id": "2ba586de1fbf441d",
        "type": "status",
        "z": "450f4de3c4f73b40",
        "name": "status: commands",
        "scope": [
            "3aead3d3f53c86d6"
        ],
        "x": 130,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "cae7ad773f3664cb",
        "type": "websocket out",
        "z": "450f4de3c4f73b40",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "b48f13f63fadba17",
        "type": "websocket in",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "",
        "server": "431414ce08ebb3c0",
        "client": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "032d5842e53c6015"
            ]
        ]
    },
    {
        "id": "e1c10e3b6608de71",
        "type": "websocket out",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "",
        "server": "431414ce08ebb3c0",
        "client": "",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "e69d5ec739695570",
        "type": "status",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "broker out",
        "scope": [
            "e1c10e3b6608de71"
        ],
        "x": 140,
        "y": 180,
        "wires": [
            [
                "5f09f67803464fe9"
            ]
        ]
    },
    {
        "id": "5f09f67803464fe9",
        "type": "switch",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "connect?",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "1b10e2f1524c44ef"
            ]
        ]
    },
    {
        "id": "1b10e2f1524c44ef",
        "type": "function",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "send retained",
        "func": "const retained = flow.get('retained', 'file') || {}\nconst messages = []\n\nnode.status({\n    text: Object.keys(retained).length,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nfor (let topic in retained) {\n\n    const message = RED.util.cloneMessage(retained[topic])\n\n    message._session = msg.status._session\n    message.retain = true\n    messages.push(message)\n\n}\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "const retained = flow.get('retained', 'file') || {}\n\nnode.status({\n    text: Object.keys(retained).length,\n    shape: 'ring',\n    fill: 'blue'\n})",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "e1c10e3b6608de71"
            ]
        ],
        "info": "Send all currently retained messages to each client as it connects.\n\nEach message received by this node must include a websocket session in\n`msg.status._session`. The output will be a succession of messages,\neach of which is a clone of a currently retained message, with\n`msg._session` set to the input message's `msg.status._session` and\n`msg.retain` set to `true`."
    },
    {
        "id": "e450663aac44ed28",
        "type": "function",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "retain",
        "func": "if (msg.retain === true) {\n\n    const retained = flow.get('retained', 'file') || {}\n\n    if (msg.payload === undefined || msg.payload === '') {\n\n        delete retained[msg.topic]\n\n    } else {\n\n        retained[msg.topic] = RED.util.cloneMessage(msg)\n\n    }\n\n    flow.set('retained', retained, 'file')\n\n    node.status({\n        text: Object.keys(retained).length,\n        shape: 'dot',\n        fill: 'blue'\n    })\n}\n\nconst message = RED.util.cloneMessage(msg)\n\nmessage.retain = false\nreturn message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "const retained = flow.get('retained', 'file') || {}\n\nnode.status({\n    text: Object.keys(retained).length,\n    shape: 'ring',\n    fill: 'blue'\n})",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "e1c10e3b6608de71"
            ]
        ],
        "info": "Maintain a repository of retained messages in flow context using a\ncontext store named `file`, which is assumed to be file-system backed.\n\nFor each input `msg`:\n\n1. If and only if `msg.retain` is `true`,\n   - If `msg.payload` is the empty string, delete the current value of `msg.topic` from the retained message repository\n   - Otherwise, set the value of `msg.topic` in the retained message repository to `msg`\n2. Output a clone of `msg` with `msg.retain` set to `false`"
    },
    {
        "id": "9cb4a587d2d04193",
        "type": "comment",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "assumes a file-system backed context store named \"file\"",
        "info": "",
        "x": 240,
        "y": 60,
        "wires": []
    },
    {
        "id": "032d5842e53c6015",
        "type": "change",
        "z": "e1d7dd3bdd3cf24a",
        "g": "165c6266935e206f",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 100,
        "wires": [
            [
                "e450663aac44ed28"
            ]
        ]
    },
    {
        "id": "0497e0ed333e8f23",
        "type": "join",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "47acab248c4d8501"
            ]
        ],
        "info": "Synchronize receipt of `daily/timestamp` and `settings/bedtime`\nmessages."
    },
    {
        "id": "8624deaf4bee22fa",
        "type": "inject",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 01 * * *",
        "once": true,
        "onceDelay": "1",
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "0497e0ed333e8f23",
                "3cbcdb02b5e451a3"
            ]
        ]
    },
    {
        "id": "47acab248c4d8501",
        "type": "function",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "timer",
        "func": "/*global suncalc*/\n\nconst LATITUDE = env.get('LATITUDE')\nconst LONGITUDE = env.get('LONGITUDE')\n\nconst MILLIS_PER_SECOND = 1000\nconst MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND\nconst MILLIS_PER_HALF_HOUR = 30 * MILLIS_PER_MINUTE\nconst MILLIS_PER_HOUR = 2 * MILLIS_PER_HALF_HOUR\n\nconst now = msg.payload.now\nconst hour = msg.payload['settings/bedtime']\nconst date = new Date(now)\nconst events = [{ cancel: true }]\nconst debug = []\n\nsuncalc.addTime(40, \"midday\", \"ignore1\")\nsuncalc.addTime(45, \"ignore2\", \"afternoon\")\n\nconst times = suncalc.getTimes(\n    new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        1,\n        1\n    ),\n    LATITUDE,\n    LONGITUDE\n)\n\nfor (let key in times) {\n\n    if (Object.prototype.hasOwnProperty.call(times, key)) {\n\n        const time = times[key].getTime()\n\n        const message = {\n            topic: 'timer/time',\n            payload: key,\n            at: time,\n        }\n\n        debug.push(message)\n\n        if (time > now) {\n            events.push(message)\n        }\n    }\n}\n\nconst offset = MILLIS_PER_HALF_HOUR - Math.floor(Math.random() * MILLIS_PER_HOUR)\n\nconst bedtime = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    hour).getTime() + offset\n\nconst bedtimeEvent = {\n    payload: 'bedtime',\n    topic: 'timer/time',\n    at: bedtime\n}\n\ndebug.push(bedtimeEvent)\n\nif (bedtime > now) {\n\n    events.push(bedtimeEvent)\n}\n\nevents.sort((a, b) => {\n\n    if (!Object.prototype.hasOwnProperty.call(a, 'at')) {\n        return b\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(b, 'at')) {\n        return a\n    }\n\n    return a.at - b.at\n})\n\nconst month = date.getMonth() + 1\nconst day = date.getDate()\nlet theme = 'standard'\n\nif ((month == 7) && (day <= 4)) {\n\n    theme = 'tribal'\n\n} else if (month == 10) {\n\n    theme = 'spooky'\n\n} else if (month == 12) {\n\n    theme = 'jolly'\n\n}\n\nevents.push({\n    payload: theme,\n    topic: 'timer/theme'\n})\n\nreturn [\n    events,\n    debug,\n    {\n        payload: theme,\n        topic: 'debug/timer/theme',\n        retain: true\n    }\n]\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "106ee66b66de58ab"
            ],
            [
                "6792ab0a12231e4e"
            ],
            [
                "869ada541db92710"
            ]
        ],
        "outputLabels": [
            "events",
            "debug",
            ""
        ],
        "info": "# Input\n\n- `msg.payload.now` - timestamp at which flows started and again each day\n   at 1am\n\n- `msg.payload.settings/bedtime` - _bedtime_ value selected by a user\n  on the dashboard\n\n# Output\n\nUp to five 'timer/time` messages per day and one `timer/theme` message.\n\n# Details\n\n## Time\n\nWhen the output `msg.topic` is `timer/time`, `msg.payload` will be one\nof:\n\n- `sunrise`\n- `midday`\n- `afternoon`\n- `sunset`\n- `bedtime`\n\nIn addition, `msg.at` will be set to the timestamp at which the\ncorresponding event message should actually be published. See the\ndocumentation for the following `delay until` function node for\ninformation on when the `timer/time` events will actually fire based\non their values for `msg.at`.\n\n## Theme\n\nWhen the output `msg.topic` is `timer/theme`, `msg.payload` will be one\nof the following values based on the date:\n\n- `tribal`\n- `spooky`\n- `jolly`\n- `standard`"
    },
    {
        "id": "0816fe94f5858846",
        "type": "rbe",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 730,
        "y": 60,
        "wires": [
            [
                "21c4dba2bb5d0e54"
            ]
        ]
    },
    {
        "id": "9977146ce026810e",
        "type": "websocket in",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "e6fc90237bd5a5e9"
            ]
        ]
    },
    {
        "id": "106ee66b66de58ab",
        "type": "function",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "delay until",
        "func": "const timers = context.get('timers')\n\nif (msg.cancel) {\n\n    timers.forEach(id => clearTimeout(id))\n    context.set('timers', [])\n\n    node.status({\n        text: 0,\n        shape: 'ring',\n        fill: 'green'\n    })\n\n    return null\n\n}\n\nif (msg.at === undefined) {\n    return msg\n}\n\nconst delay = msg.at - new Date().getTime()\n\nif (delay <= 0) {\n\n    return msg\n\n}\n\nconst id = setTimeout(() => {\n\n    let timers = context.get('timers')\n\n    timers = timers.filter(timer => timer != id)\n    context.set('timers', timers)\n\n    node.status({\n        text: timers.length,\n        shape: 'dot',\n        fill: 'green'\n    })\n\n    node.send(msg)\n\n}, delay)\n\ntimers.push(id)\ncontext.set('timers', timers)\n\nnode.status({\n    text: timers.length,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "context.set('timers', [])\n\nnode.status({\n    text: 0,\n    shape: 'ring',\n    fill: 'green'\n})",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 100,
        "wires": [
            [
                "0816fe94f5858846",
                "0c57cb4bce44a11a"
            ]
        ],
        "outputLabels": [
            "delayed"
        ],
        "info": "Delay messages until a particular time has been reached.\n\nMessages are passed through unchanged but may be delayed based on the\nvalue of `msg.at`. If `msg.at` is present, it must indicate an\nabsolute time in a format compatible with JavaScript's `new Date(time)`\nconstructor. If that time is in the future, this function will delay\nforwarding the given message until the specified time has been reached.\n\nIf `msg.at` is missing or indicates a time that is the same or earlier\nthan \"now\" (`new Date()` with no argument) then the message is passed\nthrough with no delay.\n\nIf a message arrives with `msg.cancel` set to `true`, all pending\nmessages are canceled without being sent.\n\n> **Warning:** Delays are implemented using `setTimeout()`. This means\nthat while this node will emit messages no earlier than the time\nspecified by `msg.at`, they will actually be delivered some (typically\ntiny) amount of time later based on the overhead of any computer\nprogram combined with the fact that Node-RED flows are intrinsically\nsingle-threaded. Ultra-precise timers require real-time programming\ntechniques driven by specialized hardware.\n\nNote that it would require only a bit more work to support a `msg.flush`\nthat would immediately send all pending messages rather than canceling\nthem, but there is no use case for such a feature in these flows.\n\nCanceling or flushing only a particular message without canceling or\nflushing them all would require a lot more work and a second output.\nThat is far more effort than it is worth given the probable use cases\nfor a node like this in the first place."
    },
    {
        "id": "6792ab0a12231e4e",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "debug",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "'debug/' & topic & '/' & payload",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "at",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "869ada541db92710"
            ]
        ]
    },
    {
        "id": "21c4dba2bb5d0e54",
        "type": "join",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 850,
        "y": 60,
        "wires": [
            [
                "7cf8caea790c9792"
            ]
        ],
        "info": "Block `automation/trigger` until after all three of `settings/shades`,\n`settings/lighting` and `timer/theme` have all been received."
    },
    {
        "id": "7cf8caea790c9792",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "automation/trigger",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "automation/trigger",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 60,
        "wires": [
            [
                "499de1cc5ab65c53"
            ]
        ]
    },
    {
        "id": "e6fc90237bd5a5e9",
        "type": "switch",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "timer and settings",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^timer/time$|^timer/theme$|^settings/lighting$|^settings/shades$",
                "vt": "str",
                "case": false
            },
            {
                "t": "eq",
                "v": "settings/bedtime",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 80,
        "wires": [
            [
                "0816fe94f5858846"
            ],
            [
                "0497e0ed333e8f23"
            ]
        ]
    },
    {
        "id": "c3cac0049cccb7e7",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "controls/refresh",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "controls/refresh",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 240,
        "wires": [
            [
                "869ada541db92710"
            ]
        ]
    },
    {
        "id": "c79b769649c2b419",
        "type": "status",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "websocket out",
        "scope": [
            "0c57cb4bce44a11a"
        ],
        "x": 350,
        "y": 240,
        "wires": [
            [
                "189c38230a6eb7a0"
            ]
        ]
    },
    {
        "id": "189c38230a6eb7a0",
        "type": "switch",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "connect?",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 500,
        "y": 240,
        "wires": [
            [
                "c3cac0049cccb7e7"
            ]
        ]
    },
    {
        "id": "0c57cb4bce44a11a",
        "type": "websocket out",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1220,
        "y": 200,
        "wires": []
    },
    {
        "id": "6a9ac472018c38ea",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "Morning Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "56393",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 360,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Morning Shades_."
    },
    {
        "id": "9e961b1409432775",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "Afternoon Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "42686",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 400,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Afternoon Shades_."
    },
    {
        "id": "db4f7c2c93cd8f30",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "Close All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "15208",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 480,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Close All Shades_."
    },
    {
        "id": "7adca925e9011e2f",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "put/powerview/scene",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "c8fb3c01f10259ca"
            ]
        ]
    },
    {
        "id": "679d6a0d2002bcb7",
        "type": "function",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "shades automation event",
        "func": "function copyMsg() {\n\n    return {\n        payload: msg.payload,\n        topic: msg.topic,\n        retain: false\n    }\n}\n\nif (msg.retain) {\n\n    node.status({ fill: 'grey', shape: 'dot', text: 'retained' });\n    return [null, null, null, null, null, null]\n\n}\n\nif (msg.topic != 'automation/trigger') {\n\n    node.status({ fill: 'grey', shape: 'dot', text: 'different topic' });\n    return [null, null, null, null, null, null]\n\n}\n\nif (!msg.payload['settings/shades']) {\n\n    node.status({ fill: 'grey', shape: 'dot', text: 'shades disabled' });\n    return [null, null, null, null, null, null]\n\n}\n\nswitch (msg.payload['timer/time']) {\n\n    case 'sunrise':\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [copyMsg(), null, null, null, null, null]\n\n    case 'midday':\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, copyMsg(), null, null, null, null]\n\n    case 'afternoon':\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, null, copyMsg(), null, null, null]\n\n    case 'sunset':\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, null, null, copyMsg(), null, null]\n\n    case 'dusk':\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, null, null, null, copyMsg(), null]\n\n    case 'bedtime':\n\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, null, null, null, null, copyMsg()]\n\n    default:\n\n        node.status({ fill: 'grey', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, null, null, null, null, null]\n\n}\n",
        "outputs": 6,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 440,
        "wires": [
            [
                "0a76f5d385da96d7"
            ],
            [
                "befa2aee7b7c68f0"
            ],
            [
                "11cc62548c1ebf9e"
            ],
            [
                "6d027828f94cb558"
            ],
            [
                "b5eb05ffb31db5ed"
            ],
            [
                "bc4239a2638e560d"
            ]
        ],
        "outputLabels": [
            "sunrise",
            "midday",
            "afternoon",
            "sunset",
            "dusk",
            "bedtime"
        ]
    },
    {
        "id": "839872dec0a80cfa",
        "type": "websocket in",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 440,
        "wires": [
            [
                "679d6a0d2002bcb7"
            ]
        ]
    },
    {
        "id": "48891106bb0c15f3",
        "type": "change",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "Open All Shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "7307",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 440,
        "wires": [
            [
                "7adca925e9011e2f"
            ]
        ],
        "info": "Set `msg.payload` to the scene id for _Open All Shades_."
    },
    {
        "id": "2faadc63ef5e77d2",
        "type": "trigger",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "pay",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 850,
        "y": 520,
        "wires": [
            [
                "cc0f759f7fc83125"
            ]
        ]
    },
    {
        "id": "6d027828f94cb558",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "sunset",
        "mode": "link",
        "links": [
            "97324173f5cd31d1"
        ],
        "x": 550,
        "y": 460,
        "wires": [],
        "l": true
    },
    {
        "id": "97324173f5cd31d1",
        "type": "link in",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "open all",
        "links": [
            "6d027828f94cb558",
            "befa2aee7b7c68f0"
        ],
        "x": 730,
        "y": 440,
        "wires": [
            [
                "48891106bb0c15f3"
            ]
        ],
        "l": true
    },
    {
        "id": "befa2aee7b7c68f0",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "midday",
        "mode": "link",
        "links": [
            "97324173f5cd31d1"
        ],
        "x": 560,
        "y": 380,
        "wires": [],
        "l": true
    },
    {
        "id": "cc0f759f7fc83125",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "dusk",
        "mode": "link",
        "links": [
            "f0fd3673cca0dbde"
        ],
        "x": 990,
        "y": 520,
        "wires": [],
        "l": true
    },
    {
        "id": "f0fd3673cca0dbde",
        "type": "link in",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "close all",
        "links": [
            "cc0f759f7fc83125",
            "bc4239a2638e560d"
        ],
        "x": 720,
        "y": 480,
        "wires": [
            [
                "db4f7c2c93cd8f30"
            ]
        ],
        "l": true
    },
    {
        "id": "bc4239a2638e560d",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "bedtime",
        "mode": "link",
        "links": [
            "f0fd3673cca0dbde"
        ],
        "x": 560,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "e471a1ddbc9ef198",
        "type": "link in",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "morning",
        "links": [
            "0a76f5d385da96d7"
        ],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "6a9ac472018c38ea"
            ]
        ],
        "l": true
    },
    {
        "id": "0a76f5d385da96d7",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "sunrise",
        "mode": "link",
        "links": [
            "e471a1ddbc9ef198"
        ],
        "x": 560,
        "y": 340,
        "wires": [],
        "l": true
    },
    {
        "id": "9c763cec842003b4",
        "type": "link in",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "afternoon",
        "links": [
            "11cc62548c1ebf9e"
        ],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "9e961b1409432775"
            ]
        ],
        "l": true
    },
    {
        "id": "11cc62548c1ebf9e",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "afternoon",
        "mode": "link",
        "links": [
            "9c763cec842003b4"
        ],
        "x": 560,
        "y": 420,
        "wires": [],
        "l": true
    },
    {
        "id": "8f3017ac0fd35db7",
        "type": "link in",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "dusk",
        "links": [
            "b5eb05ffb31db5ed"
        ],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "2faadc63ef5e77d2"
            ]
        ],
        "l": true
    },
    {
        "id": "b5eb05ffb31db5ed",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "dusk",
        "mode": "link",
        "links": [
            "8f3017ac0fd35db7"
        ],
        "x": 550,
        "y": 500,
        "wires": [],
        "l": true
    },
    {
        "id": "c8fb3c01f10259ca",
        "type": "websocket out",
        "z": "94027c46c4bfae12",
        "g": "8326ae1a15518f8f",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1300,
        "y": 420,
        "wires": []
    },
    {
        "id": "870608ff910feb60",
        "type": "subflow:450f4de3c4f73b40",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "Morning",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/a8498fe0-27a4-446b-9350-d236c7c663e1\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"label\":\"Exterior\"},{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/9c1c7975-2f47-4552-bac8-c19b643cd678\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"label\":\"Main Floor\"},{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/6f513d61-1c85-457e-9b40-a6ebdcec1b76\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"label\":\"Main Bathroom\"}]",
                "type": "json"
            }
        ],
        "x": 540,
        "y": 640,
        "wires": []
    },
    {
        "id": "0e592700939a92aa",
        "type": "switch",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "timer/theme",
        "property": "payload.timer/theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tribal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spooky",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jolly",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 530,
        "y": 700,
        "wires": [
            [
                "1cb0a0826e19ac25"
            ],
            [
                "8b2870e325e61ea1"
            ],
            [
                "541a0eff9f0235b7"
            ],
            [
                "4c3ffaa9eed2fd35"
            ]
        ],
        "info": "Trigger evening lighting automation for the specified _theme_."
    },
    {
        "id": "353cfc8157d414e1",
        "type": "subflow:450f4de3c4f73b40",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "Night",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/grouped_light/a8498fe0-27a4-446b-9350-d236c7c663e1\",\"payload\":{\"on\":{\"on\":false}},\"method\":\"PUT\",\"label\":\"Exterior\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/01d77dc0-3ff8-4afc-a943-9b04e4a8da0d\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Main Floor/Nightlight\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/84e98f82-c1f6-4be7-b66b-bb6e2ee9c848\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Main Bathroom/Nightlight\"}]",
                "type": "json"
            }
        ],
        "x": 550,
        "y": 760,
        "wires": []
    },
    {
        "id": "1cb0a0826e19ac25",
        "type": "subflow:450f4de3c4f73b40",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "Tribal",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/e9503c3a-16b3-49ae-a4f9-2f6074d67be0\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Exterior/Tribal\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Main Floor/Sunset\"}]",
                "type": "json"
            }
        ],
        "x": 690,
        "y": 640,
        "wires": []
    },
    {
        "id": "8b2870e325e61ea1",
        "type": "subflow:450f4de3c4f73b40",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "Spooky",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/85aef9e7-9805-4f07-afc9-80aa14e7be61\",\"payload\":{\"recall\":{\"action\":\"dynamic_palette\"}},\"method\":\"PUT\",\"label\":\"Exterior/Spooky\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Main Floor/Sunset\"}]",
                "type": "json"
            }
        ],
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "541a0eff9f0235b7",
        "type": "subflow:450f4de3c4f73b40",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "Jolly",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/a1a2735c-def7-4db7-8d8e-bebe2a7e2200\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Exterior/Jolly\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Main Floor/Sunset\"}]",
                "type": "json"
            }
        ],
        "x": 690,
        "y": 720,
        "wires": []
    },
    {
        "id": "4c3ffaa9eed2fd35",
        "type": "subflow:450f4de3c4f73b40",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "Standard",
        "env": [
            {
                "name": "COMMANDS",
                "value": "[{\"topic\":\"put/hue/192.168.1.12/resource/scene/6918db34-c83f-4e37-9581-8d4255bfd1f8\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Exterior/Sunset\"},{\"topic\":\"put/hue/192.168.1.12/resource/scene/6eff0801-01e2-4803-9840-e31c06cee079\",\"payload\":{\"recall\":{\"action\":\"active\"}},\"method\":\"PUT\",\"label\":\"Main Floor/Sunset\"}]",
                "type": "json"
            }
        ],
        "x": 700,
        "y": 760,
        "wires": []
    },
    {
        "id": "5e838b011b496bb4",
        "type": "function",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "lighting automation event",
        "func": "function copyMsg() {\n\n    return {\n        payload: msg.payload,\n        topic: msg.topic,\n        retain: false\n    }\n}\n\nif (msg.retain) {\n\n    node.status({ fill: 'grey', shape: 'dot', text: 'retain' });\n    return [null, null, null]\n\n}\n\nif (msg.topic != 'automation/trigger') {\n\n    node.status({ fill: 'grey', shape: 'dot', text: 'different topic' });\n    return [null, null, null]\n\n}\n\nif (!msg.payload['settings/lighting']) {\n\n    node.status({ fill: 'grey', shape: 'dot', text: 'lighting disabled' });\n    return [null, null, null]\n\n}\n\nswitch (msg.payload['timer/time']) {\n\n    case 'sunrise':\n\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [copyMsg(), null, null]\n\n    case 'sunset':\n\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, copyMsg(), null]\n\n    case 'bedtime':\n\n        node.status({ fill: 'blue', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, null, copyMsg()]\n\n    default:\n\n        node.status({ fill: 'grey', shape: 'dot', text: msg.payload['timer/time'] });\n        return [null, null, null]\n\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 700,
        "wires": [
            [
                "870608ff910feb60"
            ],
            [
                "0e592700939a92aa"
            ],
            [
                "353cfc8157d414e1"
            ]
        ],
        "outputLabels": [
            "sunrise",
            "sunset",
            "bedtime"
        ]
    },
    {
        "id": "244e029d9a276e82",
        "type": "websocket in",
        "z": "94027c46c4bfae12",
        "g": "c2e3e9d2c97df2d0",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 700,
        "wires": [
            [
                "5e838b011b496bb4"
            ]
        ]
    },
    {
        "id": "b044e7bab42607f8",
        "type": "comment",
        "z": "94027c46c4bfae12",
        "g": "f33001c4a3f90bd3",
        "name": "assumes ${LATITUDE} and ${LONGITUDE} are defined",
        "info": "",
        "x": 1100,
        "y": 680,
        "wires": []
    },
    {
        "id": "3cbcdb02b5e451a3",
        "type": "link out",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "initialize",
        "mode": "link",
        "links": [
            "0dfcf308245816ba",
            "08b9165876ab2131"
        ],
        "x": 300,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "499de1cc5ab65c53",
        "type": "function",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "debug trigger",
        "func": "const debug = RED.util.cloneMessage(msg)\n\ndebug.topic = 'debug/' + debug.topic\ndebug.retain = true\ndebug.payload.timestamp = new Date().toLocaleString()\n\nreturn [\n    [msg, debug]\n]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 60,
        "wires": [
            [
                "0c57cb4bce44a11a"
            ]
        ]
    },
    {
        "id": "869ada541db92710",
        "type": "rbe",
        "z": "94027c46c4bfae12",
        "g": "b10eb6ebfd377efe",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "0c57cb4bce44a11a"
            ]
        ]
    },
    {
        "id": "34d16eacb94f3e0a",
        "type": "websocket in",
        "z": "6057c05b02d1aad0",
        "g": "8ff3dbba8ae94edb",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "a855c1550339c122"
            ]
        ]
    },
    {
        "id": "2b03bb375cf8a67b",
        "type": "switch",
        "z": "6057c05b02d1aad0",
        "g": "8ff3dbba8ae94edb",
        "name": "settings",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "settings/bedtime",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "settings/lighting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "settings/shades",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 520,
        "y": 540,
        "wires": [
            [
                "c556cb062dc66d2a"
            ],
            [
                "148d79087235cd86"
            ],
            [
                "70d2ad7cf7335e75"
            ]
        ]
    },
    {
        "id": "c556cb062dc66d2a",
        "type": "link out",
        "z": "6057c05b02d1aad0",
        "g": "8ff3dbba8ae94edb",
        "name": "reset bedtime",
        "mode": "link",
        "links": [
            "d8203a0ddd97b936",
            "8df09ed123e9dda6"
        ],
        "x": 700,
        "y": 500,
        "wires": [],
        "l": true
    },
    {
        "id": "148d79087235cd86",
        "type": "link out",
        "z": "6057c05b02d1aad0",
        "g": "8ff3dbba8ae94edb",
        "name": "reset lighting",
        "mode": "link",
        "links": [
            "43188c75feb44742",
            "9d30e6537dee4911",
            "96f8511f1df7faeb"
        ],
        "x": 690,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "70d2ad7cf7335e75",
        "type": "link out",
        "z": "6057c05b02d1aad0",
        "g": "8ff3dbba8ae94edb",
        "name": "reset shades",
        "mode": "link",
        "links": [
            "aa30475a841de070",
            "9cdaafc330c26d06",
            "178f71b38b1e27a1"
        ],
        "x": 690,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "1c130fa5c6f4fb9e",
        "type": "trigger",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "21 after 5s",
        "op1": "",
        "op2": "21",
        "op1type": "nul",
        "op2type": "num",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 290,
        "y": 220,
        "wires": [
            [
                "7c3c09155bb047cb"
            ]
        ]
    },
    {
        "id": "18e0549eb96bd879",
        "type": "trigger",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "false after 5s",
        "op1": "",
        "op2": "false",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 290,
        "y": 380,
        "wires": [
            [
                "146a87a644d4c618"
            ]
        ]
    },
    {
        "id": "8df09ed123e9dda6",
        "type": "link in",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "reset bedtime",
        "links": [
            "0a1c0fddf6b6ca0b",
            "c556cb062dc66d2a"
        ],
        "x": 130,
        "y": 240,
        "wires": [
            [
                "1c130fa5c6f4fb9e"
            ]
        ],
        "l": true
    },
    {
        "id": "9cdaafc330c26d06",
        "type": "link in",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "reset shades",
        "links": [
            "a5741ce43908ad92",
            "70d2ad7cf7335e75"
        ],
        "x": 130,
        "y": 400,
        "wires": [
            [
                "18e0549eb96bd879"
            ]
        ],
        "l": true
    },
    {
        "id": "7c3c09155bb047cb",
        "type": "change",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "settings/bedtime",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "settings/bedtime",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 220,
        "wires": [
            [
                "5a096d86dd501f10"
            ]
        ]
    },
    {
        "id": "146a87a644d4c618",
        "type": "change",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "settings/shades",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "settings/shades",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 380,
        "wires": [
            [
                "5a096d86dd501f10"
            ]
        ]
    },
    {
        "id": "ed80322f1fe4a167",
        "type": "websocket out",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 800,
        "y": 300,
        "wires": []
    },
    {
        "id": "821be014e963dc51",
        "type": "status",
        "z": "6057c05b02d1aad0",
        "g": "571a5373c51d8862",
        "name": "websocket in",
        "scope": [
            "34d16eacb94f3e0a"
        ],
        "x": 130,
        "y": 60,
        "wires": [
            [
                "1d8b910fae3ff2a8"
            ]
        ]
    },
    {
        "id": "c1f4e496380951b9",
        "type": "function",
        "z": "6057c05b02d1aad0",
        "g": "8ff3dbba8ae94edb",
        "name": "reset",
        "func": "const message = RED.util.cloneMessage(msg)\n\nmessage.reset = true\nreturn message\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 540,
        "wires": [
            [
                "2b03bb375cf8a67b"
            ]
        ]
    },
    {
        "id": "a855c1550339c122",
        "type": "delay",
        "z": "6057c05b02d1aad0",
        "g": "8ff3dbba8ae94edb",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 540,
        "wires": [
            [
                "c1f4e496380951b9"
            ]
        ]
    },
    {
        "id": "5a096d86dd501f10",
        "type": "function",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "default",
        "func": "const messages = []\nconst message = RED.util.cloneMessage(msg)\nconst count = context.get(\"count\") + 1\n\nmessage.retain = true\nmessage.label = 'default'\nmessages.push(message)\n\nmessages.push({\n    payload: {\n        setting: msg.topic,\n        value: msg.payload\n    },\n    topic: 'settings/default/info'\n})\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: count })\ncontext.set(\"count\", count)\nreturn [messages]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "context.set(\"count\", 0)\nnode.status({ fill: \"blue\", shape: \"dot\", text: 0 })\n",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "ed80322f1fe4a167"
            ]
        ]
    },
    {
        "id": "a00aefc7eab1e6a6",
        "type": "join",
        "z": "6057c05b02d1aad0",
        "g": "571a5373c51d8862",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "status.source.id",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 80,
        "wires": [
            [
                "6a55581296547a51"
            ]
        ]
    },
    {
        "id": "4b7ff41599bc5342",
        "type": "status",
        "z": "6057c05b02d1aad0",
        "g": "571a5373c51d8862",
        "name": "websocket out",
        "scope": [
            "ed80322f1fe4a167"
        ],
        "x": 130,
        "y": 100,
        "wires": [
            [
                "1d8b910fae3ff2a8"
            ]
        ]
    },
    {
        "id": "1d8b910fae3ff2a8",
        "type": "change",
        "z": "6057c05b02d1aad0",
        "g": "571a5373c51d8862",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "status.text",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status.source.id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 80,
        "wires": [
            [
                "a00aefc7eab1e6a6"
            ]
        ]
    },
    {
        "id": "6a55581296547a51",
        "type": "function",
        "z": "6057c05b02d1aad0",
        "g": "571a5373c51d8862",
        "name": "connected",
        "func": "for (let key in msg.payload) {\n\n    if (Object.prototype.hasOwnProperty.call(msg.payload, key)) {\n\n        const value = msg.payload[key].trim()\n\n        if (value != 'connected') {\n            node.status({ fill: \"grey\", shape: \"dot\", text: value })\n            return null\n        }\n    }\n}\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"connected\" })\n\nreturn {\n    payload: true,\n    topic: 'connected'\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "5e9431336f357250"
            ]
        ]
    },
    {
        "id": "5e9431336f357250",
        "type": "link out",
        "z": "6057c05b02d1aad0",
        "g": "571a5373c51d8862",
        "name": "set timers",
        "mode": "link",
        "links": [
            "2be3f542ce0a582e",
            "46732b168c58f0e7",
            "6e6428d2eeca04bd"
        ],
        "x": 740,
        "y": 80,
        "wires": [],
        "l": true
    },
    {
        "id": "2be3f542ce0a582e",
        "type": "link in",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "set shades",
        "links": [
            "5e9431336f357250"
        ],
        "x": 140,
        "y": 360,
        "wires": [
            [
                "18e0549eb96bd879"
            ]
        ],
        "l": true
    },
    {
        "id": "6e6428d2eeca04bd",
        "type": "link in",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "set bedtime",
        "links": [
            "5e9431336f357250"
        ],
        "x": 130,
        "y": 200,
        "wires": [
            [
                "1c130fa5c6f4fb9e"
            ]
        ],
        "l": true
    },
    {
        "id": "0cfb70bafb2a3428",
        "type": "trigger",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "false after 5s",
        "op1": "",
        "op2": "false",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 290,
        "y": 300,
        "wires": [
            [
                "3773e4defea6a3bc"
            ]
        ]
    },
    {
        "id": "96f8511f1df7faeb",
        "type": "link in",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "reset lighting",
        "links": [
            "811aa5e79e9f10e6",
            "148d79087235cd86"
        ],
        "x": 130,
        "y": 320,
        "wires": [
            [
                "0cfb70bafb2a3428"
            ]
        ],
        "l": true
    },
    {
        "id": "3773e4defea6a3bc",
        "type": "change",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "settings/lighting",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "settings/lighting",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 300,
        "wires": [
            [
                "5a096d86dd501f10"
            ]
        ]
    },
    {
        "id": "46732b168c58f0e7",
        "type": "link in",
        "z": "6057c05b02d1aad0",
        "g": "6cbb92fa530f2a8d",
        "name": "set lighting",
        "links": [
            "5e9431336f357250"
        ],
        "x": 140,
        "y": 280,
        "wires": [
            [
                "0cfb70bafb2a3428"
            ]
        ],
        "l": true
    },
    {
        "id": "14b78c9b72d385fd",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "split by ipv4 address",
        "func": "const messages = []\n\nif (Object.prototype.hasOwnProperty.call(msg.payload, 'addresses') && Array.isArray(msg.payload.addresses)) {\n\n    for (let address of msg.payload.addresses) {\n\n        if (/^\\d{1,3}(\\.\\d{1,3}){3}/.exec(address)) {\n\n            const message = RED.util.cloneMessage(msg)\n\n            delete message.payload.addresses\n            message.topic = address\n            messages.push(message)\n\n        }\n    }\n}\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "854fc957cc0aa798"
            ]
        ]
    },
    {
        "id": "854fc957cc0aa798",
        "type": "rbe",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 60,
        "wires": [
            [
                "57e2d4b892263fc3"
            ]
        ]
    },
    {
        "id": "57e2d4b892263fc3",
        "type": "join",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 910,
        "y": 60,
        "wires": [
            [
                "a8cede2bfeed191c"
            ]
        ]
    },
    {
        "id": "0ed14c935a7933e8",
        "type": "http request",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "06c952f588cb12f4",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "f74128d99635d540"
            ]
        ],
        "info": "Send a HTTP `POST` request using TLS but without certificate validation\ndue to defects in the Hue Bridge API."
    },
    {
        "id": "f74128d99635d540",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "response",
        "func": "const messages = []\n\nfunction errorMessage(payload) {\n\n    return {\n        payload: payload,\n        topic: 'hue/' + msg.bridgeAddress + '/error',\n        retain: false\n    }\n}\n\nfunction successMessage(payload) {\n\n    return {\n        payload: payload,\n        topic: 'hue/' + msg.bridgeAddress + '/key',\n        retain: false\n    }\n}\n\nif (Array.isArray(msg.payload)) {\n\n    for (let result of msg.payload) {\n\n        if (Object.prototype.hasOwnProperty.call(result, 'success')) {\n\n            messages.push(successMessage(result.success.username))\n\n        }\n\n        if (Object.prototype.hasOwnProperty.call(result, 'error')) {\n\n            messages.push(errorMessage(result.error.description))\n\n        }\n    }\n\n} else {\n\n    messages.push(errorMessage(msg.payload))\n\n}\n\nnode.status({\n    text: Object.keys(messages).length,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn [messages]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "2159eac5031ae752"
            ]
        ]
    },
    {
        "id": "d3686879543e1951",
        "type": "subflow:85ed27d795e6e866",
        "z": "d3b34304591c64d7",
        "g": "f1e1b4bb5ddac24f",
        "name": "Ground Floor Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TITLE",
                "value": "Ground Floor",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 600,
        "wires": []
    },
    {
        "id": "c16229f8f80c5a43",
        "type": "join",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1210,
        "y": 100,
        "wires": [
            [
                "8a2991eb5255cb54"
            ]
        ]
    },
    {
        "id": "8a2991eb5255cb54",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "model",
        "func": "const discovered = msg.payload.discovered || {}\nconst hue = flow.get('hue') || {}\n\nfor (let address in discovered) {\n\n    const bridge = hue[address] || {}\n    const d = bridge.discovered || {}\n    const b = discovered[address]\n\n    for (let property in b) {\n\n        d[property] = b[property]\n    }\n\n    bridge.discovered = d\n    hue[address] = bridge\n}\n\nfor (let topic in msg.payload) {\n\n    const matches = /^hue\\/([^ /]+)\\/status$/.exec(topic)\n\n    if (Array.isArray(matches) && (matches.length == 2)) {\n\n        const address = matches[1]\n        const bridge = hue[address] || {}\n        const discovered = bridge.discovered || {}\n\n        discovered.status = msg.payload[topic]\n        bridge.discovered = discovered\n        hue[address] = bridge\n    }\n}\n\nflow.set('hue', hue)\n\nconst model = []\n\nfor (let address in hue) {\n\n    const bridge = hue[address]\n    const discovered = bridge.discovered\n\n    if (discovered.txt) {\n\n        model.push({\n            id: discovered.txt.bridgeid,\n            model: discovered.txt.modelid,\n            name: discovered.name,\n            host: discovered.host,\n            address: address,\n            port: discovered.port,\n            status: discovered.status\n        })\n    }\n}\n\nreturn {\n    payload: model,\n    topic: 'hue/bridges',\n    retain: true\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "7756c6eb9522da59"
            ]
        ]
    },
    {
        "id": "a8cede2bfeed191c",
        "type": "change",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "discovered",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "discovered",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 60,
        "wires": [
            [
                "c16229f8f80c5a43"
            ]
        ]
    },
    {
        "id": "90c4d02d576477e1",
        "type": "switch",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "^hue/[^/]+/status$",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^hue/[^/]+/status$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "c16229f8f80c5a43"
            ]
        ]
    },
    {
        "id": "226b30949f9a903b",
        "type": "switch",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "put/hue/create-key",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "put/hue/create-key",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 400,
        "wires": [
            [
                "2626ba9e8d396f71"
            ]
        ]
    },
    {
        "id": "e923bea48eeed441",
        "type": "websocket in",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 860,
        "y": 140,
        "wires": [
            [
                "90c4d02d576477e1"
            ]
        ]
    },
    {
        "id": "35758e623450f0b1",
        "type": "websocket in",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "subscribe",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 100,
        "y": 400,
        "wires": [
            [
                "226b30949f9a903b"
            ]
        ]
    },
    {
        "id": "7756c6eb9522da59",
        "type": "websocket out",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1240,
        "y": 240,
        "wires": []
    },
    {
        "id": "2159eac5031ae752",
        "type": "websocket out",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "publish",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 880,
        "y": 400,
        "wires": []
    },
    {
        "id": "0f699ed605fadf59",
        "type": "subflow:85ed27d795e6e866",
        "z": "d3b34304591c64d7",
        "g": "f1e1b4bb5ddac24f",
        "name": "Basement Hue",
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TITLE",
                "value": "Basement",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 600,
        "wires": []
    },
    {
        "id": "2626ba9e8d396f71",
        "type": "function",
        "z": "d3b34304591c64d7",
        "g": "23bf1f9635c44cc8",
        "name": "request",
        "func": "const address = msg.payload\n\nreturn {\n    bridgeAddress: address,\n    url: 'https://' + address + '/api',\n    payload: {\n        devicetype: 'nodered',\n        generateclientkey: true\n    },\n    method: 'POST'\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "0ed14c935a7933e8"
            ]
        ]
    },
    {
        "id": "19b662d5ee4b5a2f",
        "type": "http in",
        "z": "d3b34304591c64d7",
        "g": "fa261bdde51028d4",
        "name": "",
        "url": "/hue-keys",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "ce505f3a3d6ec359"
            ]
        ]
    },
    {
        "id": "16e21e0afb427d76",
        "type": "http response",
        "z": "d3b34304591c64d7",
        "g": "fa261bdde51028d4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 410,
        "y": 500,
        "wires": []
    },
    {
        "id": "ce505f3a3d6ec359",
        "type": "change",
        "z": "d3b34304591c64d7",
        "g": "fa261bdde51028d4",
        "name": "hue keys",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   $env('GROUND_FLOOR_HUE_ADDRESS'): $env('GROUND_FLOOR_HUE_KEY'),\t   $env('BASEMENT_HUE_ADDRESS'): $env('BASEMENT_HUE_KEY')\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 500,
        "wires": [
            [
                "16e21e0afb427d76"
            ]
        ]
    },
    {
        "id": "b0e9b513b0a450c3",
        "type": "debug",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "dnssd serviceDown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "counter",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "d3827e92f3158b11",
        "type": "debug",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "dnssd error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "counter",
        "x": 590,
        "y": 180,
        "wires": []
    },
    {
        "id": "cb53ddf8e4322675",
        "type": "dnssd-browser",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "service": "_hue",
        "udp": false,
        "x": 360,
        "y": 180,
        "wires": [
            [
                "14b78c9b72d385fd"
            ],
            [
                "b0e9b513b0a450c3"
            ],
            [
                "d3827e92f3158b11",
                "46957044b4a82aac"
            ],
            [
                "0679559867ced9f2"
            ]
        ]
    },
    {
        "id": "61819845f9d42866",
        "type": "inject",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "{\"command\":\"start\"}",
        "payloadType": "json",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "cb53ddf8e4322675"
            ]
        ]
    },
    {
        "id": "24c5060618b2a3bf",
        "type": "link in",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "restart browser",
        "links": [
            "55739f413f081a30"
        ],
        "x": 160,
        "y": 220,
        "wires": [
            [
                "cb53ddf8e4322675"
            ]
        ],
        "l": true
    },
    {
        "id": "46957044b4a82aac",
        "type": "trigger",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "op1": "",
        "op2": "{\"command\":\"start\"}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 240,
        "wires": [
            [
                "55739f413f081a30"
            ]
        ]
    },
    {
        "id": "55739f413f081a30",
        "type": "link out",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "restart browser",
        "mode": "link",
        "links": [
            "24c5060618b2a3bf"
        ],
        "x": 740,
        "y": 240,
        "wires": [],
        "l": true
    },
    {
        "id": "0679559867ced9f2",
        "type": "debug",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "dnssd list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "counter",
        "x": 580,
        "y": 300,
        "wires": []
    },
    {
        "id": "9e5139329b02df1e",
        "type": "inject",
        "z": "d3b34304591c64d7",
        "g": "0fd970345919b420",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "{\"command\":\"list\"}",
        "payloadType": "json",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "cb53ddf8e4322675"
            ]
        ]
    },
    {
        "id": "05224ffb74b3f646",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "b1c25d211c540da7",
        "name": "https://developers.meethue.com/develop/application-design-guidance/hue-bridge-discovery/",
        "info": "",
        "x": 830,
        "y": 540,
        "wires": []
    },
    {
        "id": "d046e6267c76dfe1",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "b1c25d211c540da7",
        "name": "assumes ${GROUND_FLOOR_HUE_ADDRESS} and ${GROUND_FLOOR_HUE_KEY} are defined",
        "info": "",
        "x": 860,
        "y": 620,
        "wires": []
    },
    {
        "id": "1867621f8f44eff1",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "b1c25d211c540da7",
        "name": "assumes ${BASEMENT_HUE_ADDRESS} and ${BASEMENT_HUE_KEY}  are defined",
        "info": "",
        "x": 820,
        "y": 660,
        "wires": []
    },
    {
        "id": "3dbe561bfaf5bbf1",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "b1c25d211c540da7",
        "name": "https://developers.meethue.com/develop/hue-api-v2/getting-started/",
        "info": "",
        "x": 760,
        "y": 500,
        "wires": []
    },
    {
        "id": "3479fc4d500c7fa3",
        "type": "comment",
        "z": "d3b34304591c64d7",
        "g": "b1c25d211c540da7",
        "name": "https://developers.meethue.com/develop/hue-api-v2/",
        "info": "",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "9b22e1e38e67938b",
        "type": "comment",
        "z": "40413194443e96c6",
        "g": "d14a8a332e18c919",
        "name": "https://motorisation.hde.nl/hd/powerview/general-guides/API/",
        "info": "## Docmented API\n\nHere is a snapshot of\n<https://motorisation.hde.nl/hd/powerview/general-guides/API/>\nas of March 17, 2024:\n\n> ---\n> To connect a PowerView&reg; system to a home automation system a\n> PowerView&reg; Hub is required.\n>\n> The current hub implementation supports an HTTP REST API which is\n> described in this document. If you have an older hub, it is also\n> possible to make use of the API through a serial connection, which is\n> described here\n>\n> Currently the API is limited to commands for getting a list of scenes\n> and commands to activate scenes. These scenes need to be created in the\n> PowerView&reg; app first. When receiving a list of scenes from the hub the\n> scene names are base64 encoded. For proper identification they need to\n> be programmatically converted to unicode utf-8 readable text. Go\n> [here](https://www.base64decode.org/) for an online converter. Go\n> [here](#base64_encoding) for some code examples.\n>\n> ---\n> **PowerView&reg; HTTP API**\n>\n>> **IMPORTANT**\n>>\n>> Make sure your hub gets a reserved/fixed ip address from the dhcp\n>> server.\n>>\n>> The preferred method of setting a fixed IP address is IP address\n>> reservation based on MAC address in the home router (which should be\n>> the router with the dhcp server running)\n>>\n>> The hub ip and MAC address can be found using the PowerView app:\n>>\n>> 1. Open the side menu.\n>> 2. Select <Hub>\n>> 3. Select the currently connected hub\n>> 4. Select <hub info>\n>>\n>> A list should appear with both ip and MAC address displayed.\n>\n> ---\n> **Get a list of all available scenes**\n>\n> request:\n>\n> method: `GET`\n>\n> `api/scenes/`\n>\n> response example:\n>\n> ```\n> {\n>   \"sceneIds\":[7214,64073,15890,42747],\n>   \"sceneData\":[\n>     {\n>       \"id\":7214,\n>       \"name\":\"QWxsIGRvd24=\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":0,\n>       \"colorId\":2,\n>       \"iconId\":0\n>     },\n>     {\n>       \"id\":64073,\n>       \"name\":\"UGxpc3NlIDE=\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":1,\n>       \"colorId\":5,\n>       \"iconId\":0\n>     },\n>     {\n>       \"id\":15890,\n>       \"name\":\"QWxsIHVw\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":2,\n>       \"colorId\":0,\n>       \"iconId\":0\n>     },\n>     {\n>       \"id\":42747,\n>       \"name\":\"UGxpc3NlIDI=\", //base64 encoded.\n>       \"roomId\":64902,\n>       \"order\":3,\n>       \"colorId\":7,\n>       \"iconId\":0\n>     }\n>   ]\n> }\n> ```\n>\n> ---\n> **Activate a scene**\n>\n> request:\n>\n> method: `GET`\n>\n> `/api/scenes?sceneId=<sceneid>`  //replace <sceneid> with actual scene id.\n>\n> response example:\n>\n> ```\n> {\n>   \"scene\":{\"shadeIds\":[35523]}\n> }\n> ```\n>\n> **Base64 encoding**\n>\n> **Python**\n>\n> ```python\n> import base64\n>\n> def decode_base64(str):\n>     \"\"\"Convert base64 to unicode text\"\"\"\n>     return base64.b64decode(str).decode('utf-8')\n> ```\n>\n> **javascript**\n>\n> ```javascript\n> function decode_base64(str){\n>   // Converts incoming base64 to unicode text.\n>   return new Buffer(str, 'base64').toString('binary');\n> }\n> ```\n\n## Undocumented Feature\n\n**Get a list of all available rooms**\n\nrequest: `GET`\n\n`api/rooms`\n\nresponse example:\n\n```\n{\n    \"roomIds\":[\n        12345,\n        56789\n    ],\n    \"roomData\":[\n        {\n            \"order\":13,\n            \"name\":\"pR9Yj2g=\",\n            \"colorId\":3,\n            \"iconId\":50,\n            \"type\":0,\n            \"id\":12345\n        },\n        {\n            \"order\":10,\n            \"name\":\"GhH357==\",\n            \"colorId\":3,\n            \"iconId\":50,\n            \"type\":0,\n            \"id\":56789\n        }\n    ]\n}\n```\n",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "2bf099ec37e84bbc",
        "type": "link call",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "",
        "links": [
            "a250d71416af8250"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 750,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a250d71416af8250",
        "type": "link in",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "send to powerview",
        "links": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "70e42b6637f4c865"
            ]
        ],
        "l": true
    },
    {
        "id": "70e42b6637f4c865",
        "type": "delay",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 310,
        "y": 220,
        "wires": [
            [
                "413305fe8cf8bc16"
            ]
        ],
        "info": "Limit the rate at which messages are sent to the PowerView hub to 1 per\nsecond."
    },
    {
        "id": "413305fe8cf8bc16",
        "type": "http request",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 220,
        "wires": [
            [
                "3b9aea255e25c86d",
                "450c11f088a3f9ee"
            ]
        ],
        "info": "Send `msg.url` as a `GET` request to the PowerView hub."
    },
    {
        "id": "3b9aea255e25c86d",
        "type": "function",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "validate",
        "func": "function cloneMessage() {\n\n    return [\n        {\n        topic: 'powerview/error',\n        payload: RED.util.cloneMessage(msg)\n    },\n    {\n        topic: 'powerview/status',\n        payload: 2\n    }\n    ]\n}\n\nlet fill = 'green'\n\ntry {\n\n    if ((typeof msg.statusCode) != 'number') {\n\n        fill = 'red'\n        return cloneMessage()\n\n    }\n\n    if ((msg.statusCode < 200) || (msg.statusCode >= 300)) {\n\n        fill = 'red'\n        return cloneMessage()\n\n    }\n\n    if (msg.statusCode != 200) {\n\n        fill = 'yellow'\n        return cloneMessage()\n\n    }\n\n    return {\n        topic: 'powerview/status',\n        payload: 1\n    }\n\n} finally {\n\n    node.status({\n        text: msg.statusCode,\n        shape: 'dot',\n        fill: fill\n    })\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            [
                "9154f7fa8b08933f"
            ]
        ],
        "outputLabels": [
            "success"
        ],
        "info": "Block unless the response indicates an error occurred."
    },
    {
        "id": "450c11f088a3f9ee",
        "type": "link out",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "powerview response",
        "mode": "return",
        "links": [],
        "x": 660,
        "y": 200,
        "wires": [],
        "l": true
    },
    {
        "id": "7fb1bd1acb1ca5f7",
        "type": "function",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "model",
        "func": "let model = []\n\nfunction findShades(roomId) {\n    const shades = []\n    for (const shade of msg.payload.shadeData) {\n        if (shade.roomId == roomId) {\n            shades.push({\n                name: shade.name,\n                id: shade.id\n            })\n        }\n    }\n    return shades.sort((a, b) => {\n        return a.name.localeCompare(b.name)\n\n    })\n}\n\nfunction findScenes(roomId) {\n    const scenes = []\n    for (const scene of msg.payload.sceneData) {\n        if (scene.roomId == roomId) {\n            scenes.push({\n                name: scene.name,\n                id: scene.id\n            })\n        }\n    }\n    return scenes.sort((a, b) => {\n        return a.name.localeCompare(b.name)\n\n    })\n}\n\nfor (const room of msg.payload.roomData) {\n    const scenes = findScenes(room.id)\n    const shades = findShades(room.id)\n    if ((scenes.length > 0) || (shades.length > 0)) {\n        model.push({\n            name: room.name,\n            id: room.id,\n            scenes: scenes,\n            shades: shades\n        })\n    }\n}\n\nmodel = model.sort((a, b) => {\n    return a.name.localeCompare(b.name)\n})\n\nreturn {\n    payload: model,\n    topic: 'powerview/model',\n    retain: true\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            [
                "4e40e2700edff9ec"
            ]
        ]
    },
    {
        "id": "eb7123132bce19c7",
        "type": "join",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 480,
        "wires": [
            [
                "7fb1bd1acb1ca5f7"
            ]
        ],
        "info": "Join messages containing `rooms` and `scenes` metadata."
    },
    {
        "id": "02eec7feccc1567d",
        "type": "subflow:699fdca4e881f8ec",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "Get Scenes",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            },
            {
                "name": "URI",
                "value": "/api/scenes/",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send to powerview",
                "type": "str"
            },
            {
                "name": "DATA",
                "value": "sceneData",
                "type": "str"
            },
            {
                "name": "ATTRIBUTE",
                "value": "sceneData",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 440,
        "wires": [
            [
                "eb7123132bce19c7"
            ]
        ]
    },
    {
        "id": "07a492e2d29b5dd3",
        "type": "subflow:699fdca4e881f8ec",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "Get Rooms",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            },
            {
                "name": "URI",
                "value": "/api/rooms/",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send to powerview",
                "type": "str"
            },
            {
                "name": "DATA",
                "value": "roomData",
                "type": "str"
            },
            {
                "name": "ATTRIBUTE",
                "value": "sceneData",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "eb7123132bce19c7"
            ]
        ]
    },
    {
        "id": "0710d650a741b921",
        "type": "switch",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "put/powerview/scene",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "put/powerview/scene",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 340,
        "wires": [
            [
                "8d706565bc654112"
            ]
        ]
    },
    {
        "id": "99ab390e30a9d634",
        "type": "switch",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "controls/refresh",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "controls/refresh",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 460,
        "wires": [
            [
                "ebfab5beb0190193"
            ]
        ]
    },
    {
        "id": "5080b46132584bf3",
        "type": "comment",
        "z": "40413194443e96c6",
        "g": "d14a8a332e18c919",
        "name": "assumes ${POWERVIEW_ADDRESS} is defined",
        "info": "",
        "x": 220,
        "y": 100,
        "wires": []
    },
    {
        "id": "54a31fbc4733c574",
        "type": "websocket in",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "0710d650a741b921"
            ]
        ]
    },
    {
        "id": "62d44392a9aac7fc",
        "type": "websocket in",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "99ab390e30a9d634"
            ]
        ]
    },
    {
        "id": "9154f7fa8b08933f",
        "type": "websocket out",
        "z": "40413194443e96c6",
        "g": "cb106476337f4d38",
        "name": "",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 800,
        "y": 240,
        "wires": []
    },
    {
        "id": "4e40e2700edff9ec",
        "type": "websocket out",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "",
        "server": "",
        "client": "b46802b9cb5603b3",
        "x": 1020,
        "y": 480,
        "wires": []
    },
    {
        "id": "8d706565bc654112",
        "type": "function",
        "z": "40413194443e96c6",
        "g": "9cf0457b813ca743",
        "name": "powerview url",
        "func": "return {\n    payload: null,\n    url: 'http://' +\n        env.get('POWERVIEW_ADDRESS') +\n        '/api/scenes?sceneId=' +\n        msg.payload\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "2bf099ec37e84bbc"
            ]
        ]
    },
    {
        "id": "97566d661d35c324",
        "type": "inject",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "every 10 seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 500,
        "wires": [
            [
                "ebfab5beb0190193"
            ]
        ]
    },
    {
        "id": "0cd6a253ead58c18",
        "type": "subflow:699fdca4e881f8ec",
        "z": "40413194443e96c6",
        "g": "9823c620ddf3d6e0",
        "name": "Get Shades",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            },
            {
                "name": "URI",
                "value": "/api/shades/",
                "type": "str"
            },
            {
                "name": "TARGET",
                "value": "send to powerview",
                "type": "str"
            },
            {
                "name": "DATA",
                "value": "shadeData",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 520,
        "wires": [
            [
                "eb7123132bce19c7"
            ]
        ]
    }
]